public static void extract() throws SQLException {
	try {
		String IGSTATUS = "-", ENSTATUS = "-", BTSTATUS = "-";
		double voltage = 0.0;
		double fuellevel = 0.0;
		double rpmval = 0.0;
		double RPM = 0.0;
		double lat1 = 0.0;
		double lon1 = 0.0;
		int vcode = 0;
		tablename = FindTableName();
		String sqluid = "select * from db_gps.t_ipunitidrange where rid=7";
		ResultSet rstuid = stpending.executeQuery(sqluid);
		while(rstuid.next()) {
			uid1 = rstuid.getString("fromUnit");
			uid2 = rstuid.getString("toUnit");
		}
		String sql = "select * from " + tablename + " where Status='Pending'  and unitid >=" + uid1 + " and unitid <=" + uid2 + "   order by StoredDate desc,StoredTime  Desc limit 500";
		NumberFormat nf = NumberFormat.getInstance();
		nf.setMaximumFractionDigits(2);
		ResultSet rst = stpending.executeQuery(sql);
		int i = 1;
		if(!rst.next()) {
			Thread.sleep(10000);
		}
		rst.previous();
		while(rst.next()) {
			i++;
			if(!(unitid.equalsIgnoreCase(rst.getString("UnitId")))) {
				oldlat = 10.1;
				oldlon = 100.0;
			}
			srno = rst.getLong("RID");
			unitid = rst.getString("UnitId");
			rmaildate = rst.getString("maildate");
			rmailtime = rst.getString("mailtime");
			rstoreddate = rst.getString("StoredDate");
			rstoredtime = rst.getString("StoredTime");
			RDataMaildateTime = rmaildate + " " + rmailtime;
			RDataStoredDateTime = rstoreddate + " " + rstoredtime;
			if(rst.getString("Body").contains("TF")) {
				String maildate = rst.getString("maildate");
				String mailtime = rst.getString("mailtime");
				String maildatetime = maildate + " " + mailtime;
				InsertIntoFtpDump(unitid, rst.getString("Body"), maildatetime);
			} else {
				StringTokenizer tempStringTokenizer = new StringTokenizer(rst.getString("Body"), "\n");
				while(tempStringTokenizer.hasMoreTokens()) {
					try {
						String token = tempStringTokenizer.nextToken().toString();
						orignalstamp = token;
						token = token.replace(",,", ",-,");
						token = token.replace(",,", ",-,");
						StringTokenizer stk = new StringTokenizer(token, ",");
						java.util.Date date2 = new Date();
						storeddate = frt1.format(date2);
						storedtime = frt2.format(date2);
						java.util.Date date22 = new Date();
						if(stk.countTokens() >= 10) {
							boolean flag = true;
							if(stk.hasMoreTokens()) {
								String sql1 = "select * from t_vehicledetails where UnitId='" + unitid + "'";
								ResultSet rst1 = stvehdet.executeQuery(sql1);
								if(rst1.next()) {
									vehcode = rst1.getString("VehicleCode");
									ownername = rst1.getString("OwnerName");
									vehregno = rst1.getString("VehicleRegNumber");
									tbname = "t_veh" + vehcode;
									DistCorrFactor = rst1.getDouble("DistCorrFactor");
									DistCorrDateTime = rst1.getTimestamp("DistCorrDateTime");
									idledistance = rst1.getInt("idledistance");
									unittype = rst1.getString("Description");
									DistType = rst1.getString("DistType");
									AvgSpeed = rst1.getInt("AvgSpeed");
									OverSpeedDurationInSecs = rst1.getInt("OverSpeedDurationInSecs");
									lastReplacementDate = rst1.getString("LastReplacementDate");
									String mulfact = rst1.getString("VehMultiplicationFactor");
									VehMultiplicationFactor = (60 * Integer.parseInt(mulfact.substring(0, 1)) + Integer.parseInt(mulfact.substring(2, 4))) * 60000;
								} else {
									tbname = "t_veh0";
									vehcode = "0";
									String sqlveh0data = "select concat(TheDate,' ',TheTime) as Date from allconnectedunits where UnitId='" + unitid + "' ";
									ResultSet rstveh0 = stvehdet1.executeQuery(sqlveh0data);
									if(rstveh0.next()) {
										DistCorrDateTime = rstveh0.getTimestamp("Date");
									} else {
										DistCorrDateTime = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse("1999-01-01 00:00:01");
									}
									String mulfact1 = "5.3000";
									ownername = "unidentified";
									DistCorrFactor = 0;
									idledistance = 0;
									VehMultiplicationFactor = (60 * Integer.parseInt(mulfact1.substring(0, 1)) + Integer.parseInt(mulfact1.substring(2, 4))) * 60000;
								}
								if(stk.hasMoreTokens()) {
									stamp = stk.nextElement().toString();
									stamp = stamp.replace(" ", "");
									if(stamp.length() > 99) {
										InsertInvalidData(srno, unitid, orignalstamp, storeddate, storedtime, "Abnormal Stamp");
										continue;
									}
								}
								if(stk.hasMoreTokens()) {
									dt = stk.nextElement().toString();
									String dt1 = new SimpleDateFormat("yyyy-MM-dd").format(new SimpleDateFormat("ddMMyy").parse(dt));
									String dt2 = "SELECT DATEDIFF(now(),'" + dt1 + "') AS DiffDate";
									ResultSet rsdt2 = st.executeQuery(dt2);
									int diffdays = 0;
									String newdate = "";
									if(rsdt2.next()) {
										diffdays = rsdt2.getInt("DiffDate");
									}
									if(diffdays > 3650) {
										String dt3 = "SELECT DATE('" + dt1 + "' + INTERVAL 7168 day) AS Date";
										ResultSet rsdt3 = st1.executeQuery(dt3);
										if(rsdt3.next()) {
											dt = rsdt3.getString("Date");
										}
										dt = new SimpleDateFormat("ddMMyy").format(new SimpleDateFormat("yyyy-MM-dd").parse(dt));
									}
									date1 = GetValidDate(dt);
									if(CheckValidDate(date1)) {
										if(stk.hasMoreTokens()) {
											tm = stk.nextElement().toString();
											time1 = GetValidTime(tm);
											if(CheckValidTime(tm)) {
												if(!(tbname.equalsIgnoreCase("t_veh0"))) {
													stampdatetime = date1 + " " + time1;
													if(CheckUnitReplacemtntDate(lastReplacementDate, stampdatetime)) {
														String sqlrep = "select vehcode,Instdate,Insttime from db_gps.t_unitreplacement where newunitid='" + unitid + "' and concat(Instdate,' ',Insttime)<'" + stampdatetime + "' order by concat(Instdate,' ',Insttime) DESC LIMIT 1";
														ResultSet rsrep = stvehdet2.executeQuery(sqlrep);
														if(rsrep.next()) {
															String installdate = rsrep.getString("Instdate") + " " + rsrep.getString("Insttime");
															String sqlrep1 = "select vehcode from db_gps.t_unitreplacement where OldUnitID = '" + unitid + "'  and concat(Instdate,' ',Insttime) > '" + installdate + "'  and concat(Instdate,' ',Insttime) < '" + stampdatetime + "' ";
															ResultSet rsrep1 = stvehdet1.executeQuery(sqlrep1);
															if(rsrep1.next()) {
																vehcode = "0";
																tbname = "t_veh0";
																String mulfact1 = "5.3000";
																ownername = "unidentified";
																DistCorrFactor = 0;
																idledistance = 0;
																VehMultiplicationFactor = (60 * Integer.parseInt(mulfact1.substring(0, 1)) + Integer.parseInt(mulfact1.substring(2, 4))) * 60000;
															} else {
																vehcode = rsrep.getString("vehcode");
																tbname = "t_veh" + vehcode;
																DistCorrFactor = 0;
																sql1 = "select * from t_vehicledetails where vehiclecode='" + vehcode + "'";
																ResultSet rst11 = stvehdet3.executeQuery(sql1);
																if(rst11.next()) {
																	vehcode = rst11.getString("VehicleCode");
																	ownername = rst11.getString("OwnerName");
																	vehregno = rst11.getString("VehicleRegNumber");
																	tbname = "t_veh" + vehcode;
																	DistCorrFactor = rst11.getInt("DistCorrFactor");
																	DistCorrDateTime = rst11.getTimestamp("DistCorrDateTime");
																	idledistance = rst11.getInt("idledistance");
																	unittype = rst11.getString("Description");
																	DistType = rst11.getString("DistType");
																	AvgSpeed = rst11.getInt("AvgSpeed");
																	OverSpeedDurationInSecs = rst11.getInt("OverSpeedDurationInSecs");
																	lastReplacementDate = rst11.getString("LastReplacementDate");
																	String mulfact = rst11.getString("VehMultiplicationFactor");
																	VehMultiplicationFactor = (60 * Integer.parseInt(mulfact.substring(0, 1)) + Integer.parseInt(mulfact.substring(2, 4))) * 60000;
																} else {
																	vehcode = "0";
																	tbname = "t_veh0";
																	String mulfact1 = "5.3000";
																	ownername = "unidentified";
																	DistCorrFactor = 0;
																	idledistance = 0;
																	VehMultiplicationFactor = (60 * Integer.parseInt(mulfact1.substring(0, 1)) + Integer.parseInt(mulfact1.substring(2, 4))) * 60000;
																}
															}
														} else {
															vehcode = "0";
															tbname = "t_veh0";
															String mulfact1 = "5.3000";
															ownername = "unidentified";
															DistCorrFactor = 0;
															idledistance = 0;
															VehMultiplicationFactor = (60 * Integer.parseInt(mulfact1.substring(0, 1)) + Integer.parseInt(mulfact1.substring(2, 4))) * 60000;
														}
													}
												}
												if(stk.hasMoreTokens()) {
													lat = stk.nextElement().toString();
													if(CheckValidLatLong(lat)) {
														lat = "" + Double.parseDouble(lat);
														insertlat = getLatLong(Double.parseDouble(lat));
														if(stk.hasMoreTokens()) {
															latdir = stk.nextElement().toString();
														}
														if(stk.hasMoreTokens()) {
															lon = stk.nextElement().toString();
															if(CheckValidLatLong(lon)) {
																lon = "" + Double.parseDouble(lon);
																insertlong = getLatLong(Double.parseDouble(lon));
																if(stk.hasMoreTokens()) {
																	londir = stk.nextElement().toString();
																}
																if(stk.hasMoreTokens()) {
																	dd = stk.nextElement().toString();
																	if(dd.equals("-")) {
																		dd = "0";
																	}
																	if(CheckValidDirectionDegree(dd)) {
																		dd = "" + Double.parseDouble(dd);
																		if(stk.hasMoreTokens()) {
																			speed = stk.nextElement().toString();
																			if(CheckSpeedDistance(speed)) {
																				if(stk.hasMoreTokens()) {
																					distance = stk.nextElement().toString();
																					if(CheckSpeedDistance(distance)) {
																						if(stamp.equals("CC")) {
																							if(stk.hasMoreTokens()) {
																								date111 = stk.nextElement().toString();
																								date1112 = GetValidDate(date111);
																								if(stk.hasMoreTokens()) {
																									time111 = stk.nextElement().toString();
																									time1112 = GetValidTime(time111);
																									if(stk.hasMoreTokens()) {
																										lat11 = stk.nextElement().toString();
																										if(stk.hasMoreTokens()) {
																											lat11dir = stk.nextElement().toString();
																											if(stk.hasMoreTokens()) {
																												long11 = stk.nextElement().toString();
																												if(stk.hasMoreTokens()) {
																													long11dir = stk.nextElement().toString();
																												}
																											}
																										}
																									}
																								}
																							}
																						}
																						if(stk.hasMoreTokens()) adc1 = stk.nextElement().toString();
																						if("JD".equalsIgnoreCase(stamp)) {
																							routeFileCount = adc1;
																						}
																						if(adc1.startsWith("$")) {
																							try {
																								sen1 = adc1;
																								if(stk.hasMoreTokens()) sen2 = stk.nextElement().toString();
																								if(stk.hasMoreTokens()) sen3 = stk.nextElement().toString();
																								if(stk.hasMoreTokens()) sen4 = stk.nextElement().toString();
																								if(stk.hasMoreTokens()) sen5 = stk.nextElement().toString();
																							} catch (Exception e) {}
																						} else if(adc1.startsWith("#")) {
																							cellDetails = true;
																							signalStrength = adc1;
																							if(signalStrength.length() >= 2) {
																								signalStrength = signalStrength.replace("#", "");
																							}
																							if(stk.hasMoreTokens()) cellId = stk.nextElement().toString();
																							if(stk.hasMoreTokens()) networkOperator = stk.nextElement().toString();
																						} else {
																							if(stk.hasMoreTokens()) adc2 = stk.nextElement().toString();
																							try {
																								if(adc2.contains("@")) {
																									if(stk.hasMoreTokens()) {
																										sen1 = stk.nextElement().toString();
																									}
																									if(stk.hasMoreTokens()) {
																										sen2 = stk.nextElement().toString();
																									}
																									if(stk.hasMoreTokens()) {
																										sen3 = stk.nextElement().toString();
																									}
																									if(stk.hasMoreTokens()) {
																										String tempSen = stk.nextElement().toString();
																										if(tempSen.equals("$KU") || tempSen.equals("$KA")) {
																											sen5 = tempSen;
																											sen4 = stk.nextElement().toString();
																										} else {
																											sen4 = tempSen;
																										}
																									}
																									if(stk.hasMoreTokens()) {
																										sen5 = stk.nextElement().toString();
																									}
																									if(stk.hasMoreTokens()) {
																										sen6 = stk.nextElement().toString();
																									}
																									if(stk.hasMoreTokens()) {
																										sen7 = stk.nextElement().toString();
																									}
																									if(stk.hasMoreTokens()) {
																										sen8 = stk.nextElement().toString();
																									}
																									if(stk.hasMoreTokens()) {
																										sen9 = stk.nextElement().toString();
																									}
																									if(stk.hasMoreTokens()) {
																										sen10 = stk.nextElement().toString();
																									}
																									if(stk.hasMoreTokens()) {
																										sen11 = stk.nextElement().toString();
																									}
																									if(stk.hasMoreTokens()) {
																										sen12 = stk.nextElement().toString();
																									}
																									if(stk.hasMoreTokens()) {
																										sen13 = stk.nextElement().toString();
																									}
																									if(stk.hasMoreTokens()) {
																										sen14 = stk.nextElement().toString();
																									}
																									if(stk.hasMoreTokens()) {
																										sen15 = stk.nextElement().toString();
																									}
																									if(stk.hasMoreTokens()) {
																										sen16 = stk.nextElement().toString();
																									}
																									if(stk.hasMoreTokens()) {
																										sen17 = stk.nextElement().toString();
																									}
																									if(stk.hasMoreTokens()) {
																										sen18 = stk.nextElement().toString();
																									}
																									if(stk.hasMoreTokens()) {
																										sen19 = stk.nextElement().toString();
																									}
																									if(stk.hasMoreTokens()) {
																										sen20 = stk.nextElement().toString();
																									}
																								} else {
																									if(stk.hasMoreTokens()) {
																										sen1 = stk.nextElement().toString();
																										if(sen1.startsWith("#")) {
																											cellDetails = true;
																											signalStrength = sen1;
																											if(stk.hasMoreTokens()) cellId = stk.nextElement().toString();
																											if(stk.hasMoreTokens()) networkOperator = stk.nextElement().toString();
																											if(signalStrength.length() >= 2) {
																												signalStrength = signalStrength.replace("#", "");
																												networkOperator = networkOperator.replace("\r", "");
																											}
																										} else if(sen1.startsWith("$")) {
																											try {
																												if(stk.hasMoreTokens()) sen2 = stk.nextElement().toString();
																												if(stk.hasMoreTokens()) sen3 = stk.nextElement().toString();
																												if(stk.hasMoreTokens()) sen4 = stk.nextElement().toString();
																												if(stk.hasMoreTokens()) sen5 = stk.nextElement().toString();
																											} catch (Exception e) {}
																										} else {
																											if(!(sen1.contains(""))) {
																												point_id = Integer.parseInt(sen1.trim());
																											} else {
																												point_id = 0;
																											}
																											if(stk.hasMoreTokens()) {
																												sen1 = stk.nextElement().toString();
																												if(sen1.startsWith("$")) {
																													try {
																														if(stk.hasMoreTokens()) sen2 = stk.nextElement().toString();
																														if(stk.hasMoreTokens()) sen3 = stk.nextElement().toString();
																														if(stk.hasMoreTokens()) sen4 = stk.nextElement().toString();
																														if(stk.hasMoreTokens()) sen5 = stk.nextElement().toString();
																													} catch (Exception e) {}
																												}
																											}
																										}
																									}
																									if(stk.hasMoreTokens()) sen2 = stk.nextElement().toString();
																									if(stk.hasMoreTokens()) {
																										sen3 = stk.nextElement().toString();
																										if(sen3.startsWith("#")) {
																											cellDetails = true;
																											signalStrength = sen3;
																											if(stk.hasMoreTokens()) cellId = stk.nextElement().toString();
																											if(stk.hasMoreTokens()) networkOperator = stk.nextElement().toString();
																											if(signalStrength.length() >= 2) {
																												signalStrength = signalStrength.replace("#", "");
																												networkOperator = networkOperator.replace("\r", "");
																											}
																										}
																									}
																									if(stk.hasMoreTokens()) sen4 = stk.nextElement().toString();
																									if(stk.hasMoreTokens()) sen5 = stk.nextElement().toString();
																								}
																							} catch (Exception e) {}
																						}
																						if(null == sen1) {
																							sen1 = "-";
																						}
																						if(null == sen2) {
																							sen2 = "-";
																						}
																						if(null == sen3) {
																							sen3 = "-";
																						}
																						if(null == sen4) {
																							sen4 = "-";
																						}
																						if(null == sen5) {
																							sen5 = "-";
																						}
																						if(adc2.contains("@")) {
																							try {
																								if(!sen3.contains("+") && Integer.parseInt(sen3) > 0) {
																									int rpm = Integer.parseInt(sen3);
																									rpm = rpm * 2;
																									sen3 = rpm + "";
																								}
																							} catch (Exception e) {}
																							if(sen1.startsWith("+X") || sen1.startsWith("-X") || sen1.equals("+085.00") || sen1.equals("-085.00")) {
																								sen1 = "-";
																							}
																							if(sen2.startsWith("+X") || sen2.startsWith("-X") || sen2.equals("+085.00") || sen2.equals("-085.00")) {
																								sen2 = "-";
																							}
																							if(sen5.equals("$KU")) {
																								ENSTATUS = "Invalid Key";
																							} else {
																								if(sen5.equals("$KA")) {
																									ENSTATUS = "Valid Key";
																								} else {
																									if(sen5.equals("0") || sen5 == "0" || sen5.contains("0")) {
																										ENSTATUS = sen5;
																									} else {
																										if(sen5.equals("1") || sen5 == "1" || sen5.contains("1")) {
																											ENSTATUS = sen5;
																										} else {
																											ENSTATUS = "No Key";
																										}
																									}
																								}
																							}
																						} else {
																							if(null != unittype && unittype.equals("SMARTCARD")) {
																								if(sen1.length() > 2) {
																									sen1 = sen1.replace("$", "");
																									sen2 = sen2.replace("\r", "");
																								}
																							}
																							if(null != unittype && (unittype.equals("TEMPSENSOR") || unittype.equals("Camera"))) {
																								if(sen1.length() > 2) {
																									sen1 = sen1.replace("$", "");
																								}
																							}
																							if(null != unittype && unittype.equals("FUELFLOW")) {
																								sen1 = sen1.replace("$", "");
																								if(stamp.equals("SI") && token.contains("$")) {
																									try {
																										if(sen1.contains("ION")) {
																											IGSTATUS = "ON";
																										}
																										if(sen1.contains("IOF")) {
																											IGSTATUS = "OF";
																										}
																										voltage = Double.parseDouble(sen2);
																										if(voltage > 0.0) {
																											fuellevel = getlevel(voltage, vehregno);
																										}
																										if(sen3.contains("EON")) {
																											ENSTATUS = "ON";
																										}
																										if(sen3.contains("EOF")) {
																											ENSTATUS = "OF";
																										}
																										if(!(sen4.equals("-"))) rpmval = Double.parseDouble(sen4);
																										if(rpmval > 0.0) {
																											RPM = (rpmval * 60) / 16;
																										}
																									} catch (Exception e) {}
																								}
																							}
																							if(null != unittype && unittype.equals("GENSETTRACK")) {
																								tstamp = sen1;
																								sen1 = sen2;
																								sen2 = sen3;
																								sen3 = sen4;
																								sen4 = sen5;
																								try {
																									try {
																										part1 = Double.parseDouble(sen2);
																										if(part1 > 0.0) {
																											part1 = part1 / 10.0;
																											sen2 = nf.format(part1);
																										}
																									} catch (Exception e) {}
																									try {
																										part2 = Double.parseDouble(sen3);
																										if(part2 > 0.0) {
																											part2 = (part2 * 250.0) / 4095;
																											sen3 = nf.format(part2);
																										}
																									} catch (Exception e) {}
																									try {
																										part3 = Double.parseDouble(sen4);
																										if(part3 > 0.0) {
																											part3 = part3 / 100;
																											sen4 = nf.format(part3);
																										}
																									} catch (Exception e) {}
																								} catch (Exception e) {
																									sen1 = "-";
																									sen2 = "-";
																									sen3 = "-";
																									sen4 = "-";
																								}
																							}
																						}
																						date2 = ((DateFormat) frt).parse(date1 + " " + time1);
																						date2.setTime(date2.getTime() + VehMultiplicationFactor);
																						insertdate = frt1.format(date2);
																						inserttime = frt2.format(date2);
																						if(date1112 != null) {
																							date22 = ((DateFormat) frt).parse(date1112 + " " + time1112);
																							date22.setTime(date22.getTime() + VehMultiplicationFactor);
																							insertdate1 = frt1.format(date22);
																							inserttime1 = frt2.format(date22);
																						}
																						if(stamp.equals("SI")) {
																							if(token.contains("$C1")) {
																								cellDetails1 = true;
																								int c1dx = 0, c1edx = 0;
																								c1dx = token.indexOf("C1");
																								if(c1dx > 0) {
																									c1edx = token.indexOf(",C2", c1dx);
																									String js = token.substring(c1dx, c1edx);
																									String c1 = js.substring(3);
																									String[] words1 = c1.split(",");
																									mcc1 = words1[0];
																									mnc1 = words1[1];
																									lac1 = words1[2];
																									cellid1 = words1[3];
																									for(String ss: words1) {}
																								}
																								int c2dx = 0, c2edx = 0;
																								c2dx = token.indexOf("C2");
																								if(c2dx > 0) {
																									c2edx = token.indexOf(",C3", c2dx);
																									String js = token.substring(c2dx, c2edx);
																									String c2 = js.substring(3);
																									String[] words1 = c2.split(",");
																									mcc2 = words1[0];
																									mnc2 = words1[1];
																									lac2 = words1[2];
																									cellid2 = words1[3];
																									for(String ss: words1) {}
																								}
																								int c3dx = 0, c3edx = 0;
																								c3dx = token.indexOf("C3");
																								if(c3dx > 0) {
																									c3edx = token.indexOf(",C4", c3dx);
																									String js = token.substring(c3dx, c3edx);
																									String c3 = js.substring(3);
																									String[] words1 = c3.split(",");
																									mcc3 = words1[0];
																									mnc3 = words1[1];
																									lac3 = words1[2];
																									cellid3 = words1[3];
																									for(String ss: words1) {}
																								}
																								int c4dx = 0, c4edx = 0;
																								c4dx = token.indexOf("C4");
																								if(c4dx > 0) {
																									c4edx = token.indexOf(",C5", c4dx);
																									String js = token.substring(c4dx, c4edx);
																									String c4 = js.substring(3);
																									String[] words1 = c4.split(",");
																									mcc4 = words1[0];
																									mnc4 = words1[1];
																									lac4 = words1[2];
																									cellid4 = words1[3];
																									for(String ss: words1) {}
																								}
																								int c5dx = 0, c5edx = 0;
																								c5dx = token.indexOf("C5");
																								if(c5dx > 0) {
																									c5edx = token.indexOf(",C6", c5dx);
																									String js = token.substring(c5dx, c5edx);
																									String c5 = js.substring(3);
																									String[] words1 = c5.split(",");
																									mcc5 = words1[0];
																									mnc5 = words1[1];
																									lac5 = words1[2];
																									cellid5 = words1[3];
																									for(String ss: words1) {}
																								}
																								int c6dx = 0, c6edx = 0;
																								c6dx = token.indexOf("C6");
																								if(c6dx > 0) {
																									c6edx = token.indexOf(",", token.indexOf(",", token.indexOf(",", token.indexOf(",", token.indexOf(",", c6dx + 1) + 1) + 1) + 1) + 1);
																									if(c6edx > c6dx) {} else {
																										c6edx = token.length();
																									}
																									String js = token.substring(c6dx, c6edx);
																									String c6 = js.substring(3);
																									String[] words1 = c6.split(",");
																									mcc6 = words1[0];
																									mnc6 = words1[1];
																									lac6 = words1[2];
																									cellid6 = words1[3];
																									for(String ss: words1) {}
																								}
																							}
																							int ptdx = 0, ptedx = 0;
																							ptdx = token.indexOf("PT");
																							if(ptdx > 0) {
																								if(token.indexOf(",", ptdx) > ptdx) {
																									ptedx = token.indexOf(",", ptdx);
																									String js = token.substring(ptdx, ptedx);
																									pt = js.substring(2);
																									point_id = Integer.parseInt(pt);
																								} else {
																									ptedx = token.length();
																									String js = token.substring(ptdx, ptedx);
																									pt = js.substring(2);
																									point_id = Integer.parseInt(pt);
																								}
																							}
																							int dtdx = 0, dtedx = 0;
																							dtdx = token.indexOf("DT");
																							if(dtdx > 0) {
																								if(token.indexOf(",", dtdx) > dtdx) {
																									dtedx = token.indexOf(",", dtdx);
																									String js = token.substring(dtdx, dtedx);
																									dst1 = js.substring(2);
																								} else {
																									dtedx = token.length();
																									String js = token.substring(dtdx, dtedx);
																									dst1 = js.substring(2);
																								}
																							}
																							int didx = 0, diedx = 0;
																							didx = token.indexOf("DI");
																							if(didx > 0) {
																								if(token.indexOf(",", didx) > didx) {
																									diedx = token.indexOf(",", didx);
																									String js = token.substring(didx, diedx);
																									dit1 = js.substring(2);
																								} else {
																									diedx = token.length();
																									String js = token.substring(didx, diedx);
																									dit1 = js.substring(2);
																								}
																							}
																							int sddx = 0, sdedx = 0;
																							sddx = token.indexOf("SD");
																							if(sddx > 0) {
																								if(token.indexOf(",", sddx) > sddx) {
																									sdedx = token.indexOf(",", sddx);
																									String js = token.substring(sddx, sdedx);
																									sd = js.substring(2);
																								} else {
																									sdedx = token.length();
																									String js = token.substring(sddx, sdedx);
																									sd = js.substring(2);
																								}
																							}
																							int rodx = 0, roedx = 0;
																							rodx = token.indexOf("RO");
																							if(rodx > 0) {
																								if(token.indexOf(",", rodx) > rodx) {
																									roedx = token.indexOf(",", rodx);
																									String js = token.substring(rodx, roedx);
																									ro = js.substring(2);
																								} else {
																									roedx = token.length();
																									String js = token.substring(rodx, roedx);
																									ro = js.substring(2);
																								}
																							}
																							int codx = 0, coedx = 0;
																							codx = token.indexOf("CO");
																							if(codx > 0) {
																								if(token.indexOf(",", codx) > codx) {
																									coedx = token.indexOf(",", codx);
																									String js = token.substring(codx, coedx);
																									co = js.substring(2);
																								} else {
																									coedx = token.length();
																									String js = token.substring(codx, coedx);
																									co = js.substring(2);
																								}
																							}
																							int fcdx = 0, fcedx = 0;
																							fcdx = token.indexOf("FC");
																							if(fcdx > 0) {
																								if(token.indexOf(",", fcdx) > fcdx) {
																									fcedx = token.indexOf(",", fcdx);
																									String js = token.substring(fcdx, fcedx);
																									fc = js.substring(2);
																								} else {
																									fcedx = token.length();
																									String js = token.substring(fcdx, fcedx);
																									fc = js.substring(2);
																								}
																							}
																							int czdx = 0, czedx = 0;
																							czdx = token.indexOf("CZ");
																							if(czdx > 0) {
																								if(token.indexOf(",", czdx) > czdx) {
																									czedx = token.indexOf(",", czdx);
																									String js = token.substring(czdx, czedx);
																									cz = js.substring(2);
																								} else {
																									czedx = token.length();
																									String js = token.substring(czdx, czedx);
																									cz = js.substring(2);
																								}
																							}
																							int ecdx = 0, ecedx = 0;
																							ecdx = token.indexOf("EC");
																							if(dtdx > 0) {
																								if(token.indexOf(",", ecdx) > ecdx) {
																									ecedx = token.indexOf(",", ecdx);
																									String js = token.substring(ecdx, ecedx);
																									ec = js.substring(2);
																								} else {
																									ecedx = token.length();
																									String js = token.substring(ecdx, ecedx);
																									ec = js.substring(2);
																								}
																							}
																							int drdx = 0, dredx = 0;
																							drdx = token.indexOf("DR");
																							if(drdx > 0) {
																								if(token.indexOf(",", drdx) > drdx) {
																									dredx = token.indexOf(",", drdx);
																									String js = token.substring(drdx, dredx);
																									dr = js.substring(2);
																								} else {
																									dredx = token.length();
																									String js = token.substring(drdx, dredx);
																									dr = js.substring(2);
																								}
																							}
																							int rzdx = 0, rzedx = 0;
																							rzdx = token.indexOf("RZ");
																							if(rzdx > 0) {
																								if(token.indexOf(",", rzdx) > rzdx) {
																									rzedx = token.indexOf(",", rzdx);
																									String js = token.substring(rzdx, rzedx);
																									rz = js.substring(2);
																								} else {
																									rzedx = token.length();
																									String js = token.substring(rzdx, rzedx);
																									rz = js.substring(2);
																								}
																							}
																							int rpdx = 0, rpedx = 0;
																							rpdx = token.indexOf("RP");
																							if(rpdx > 0) {
																								if(token.indexOf(",", rpdx) > rpdx) {
																									rpedx = token.indexOf(",", rpdx);
																									String js = token.substring(rpdx, rpedx);
																									rp = js.substring(2);
																								} else {
																									rpedx = token.length();
																									String js = token.substring(rpdx, rpedx);
																									rp = js.substring(2);
																								}
																							}
																							int crdx = 0, credx = 0;
																							crdx = token.indexOf("CR");
																							if(crdx > 0) {
																								if(token.indexOf(",", crdx) > crdx) {
																									credx = token.indexOf(",", crdx);
																									String js = token.substring(crdx, credx);
																									crr = js.substring(2);
																								} else {
																									credx = token.length();
																									String js = token.substring(crdx, credx);
																									crr = js.substring(2);
																								}
																							}
																							int hudx = 0, huedx = 0;
																							hudx = token.indexOf("HU");
																							if(hudx > 0) {
																								if(token.indexOf(",", hudx) > hudx) {
																									huedx = token.indexOf(",", hudx);
																									String js = token.substring(hudx, huedx);
																									hu = js.substring(2);
																								} else {
																									huedx = token.length();
																									String js = token.substring(hudx, huedx);
																									hu = js.substring(2);
																								}
																							}
																							int tmdx = 0, tmedx = 0;
																							tmdx = token.indexOf("TM");
																							if(tmdx > 0) {
																								if(token.indexOf(",", tmdx) > tmdx) {
																									tmedx = token.indexOf(",", tmdx);
																									String js = token.substring(tmdx, tmedx);
																									tm1 = js.substring(2);
																								} else {
																									tmedx = token.length();
																									String js = token.substring(tmdx, tmedx);
																									tm1 = js.substring(2);
																								}
																							}
																							int dbdx = 0, dbedx = 0;
																							dbdx = token.indexOf("DB");
																							if(dbdx > 0) {
																								if(token.indexOf(",", dbdx) > dbdx) {
																									dbedx = token.indexOf(",", dbdx);
																									String js = token.substring(dbdx, dbedx);
																									db = js.substring(2);
																								} else {
																									dbedx = token.length();
																									String js = token.substring(dbdx, dbedx);
																									db = js.substring(2);
																								}
																							}
																							int srdx = 0, sredx = 0;
																							srdx = token.indexOf("SR");
																							if(srdx > 0) {
																								if(token.indexOf(",", srdx) > srdx) {
																									sredx = token.indexOf(",", srdx);
																									String js = token.substring(srdx, sredx);
																									sr = js.substring(2);
																								} else {
																									sredx = token.length();
																									String js = token.substring(srdx, sredx);
																									sr = js.substring(2);
																								}
																							}
																							int ozdx = 0, ozedx = 0;
																							ozdx = token.indexOf("OZ");
																							if(ozdx > 0) {
																								if(token.indexOf(",", ozdx) > ozdx) {
																									ozedx = token.indexOf(",", ozdx);
																									String js = token.substring(ozdx, ozedx);
																									oz = js.substring(2);
																								} else {
																									ozedx = token.length();
																									String js = token.substring(ozdx, ozedx);
																									oz = js.substring(2);
																								}
																							}
																							int pudx = 0, puedx = 0;
																							pudx = token.indexOf("PU");
																							if(pudx > 0) {
																								if(token.indexOf(",", pudx) > pudx) {
																									puedx = token.indexOf(",", pudx);
																									String js = token.substring(pudx, puedx);
																									pu = js.substring(2);
																								} else {
																									puedx = token.length();
																									String js = token.substring(pudx, puedx);
																									pu = js.substring(2);
																								}
																							}
																							int rndx = 0, rnedx = 0;
																							rndx = token.indexOf("RN");
																							if(rndx > 0) {
																								if(token.indexOf(",", rndx) > rndx) {
																									rnedx = token.indexOf(",", rndx);
																									String js = token.substring(rndx, rnedx);
																									rn = js.substring(2);
																								} else {
																									rnedx = token.length();
																									String js = token.substring(rndx, rnedx);
																									rn = js.substring(2);
																								}
																							}
																							int prdx = 0, predx = 0;
																							prdx = token.indexOf("PR");
																							if(prdx > 0) {
																								if(token.indexOf(",", prdx) > prdx) {
																									predx = token.indexOf(",", prdx);
																									String js = token.substring(prdx, predx);
																									pr = js.substring(2);
																								} else {
																									predx = token.length();
																									String js = token.substring(prdx, predx);
																									pr = js.substring(2);
																								}
																							}
																						}
																						java.util.Date todaydtee = new java.util.Date();
																						String todaydatee;
																						int minsdiff = 0;
																						todaydatee = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").format(todaydtee);
																						String sqldays1 = "SELECT TIMESTAMPDIFF(MINUTE , '" + todaydatee + "' , '" + insertdate + " " + inserttime + "' ) AS days ";
																						ResultSet rstdays = st.executeQuery(sqldays1);
																						if(rstdays.next()) {
																							minsdiff = rstdays.getInt("days");
																						}
																						if(minsdiff > 30) {
																							InsertInvalidData(srno, unitid, orignalstamp, storeddate, storedtime, "Future Data");
																						} else {
																							String s = "select (2.0 * 3958.75 * ATAN(SQRT(SIN(RADIANS(" + oldlat + " - " + insertlat + ")*0.5) * SIN(RADIANS(" + oldlat + " - " + insertlat + ")*0.5) + COS(RADIANS(" + insertlat + ")) * COS(RADIANS(" + oldlat + ")) *SIN(RADIANS(" + oldlon + " - " + insertlong + ")*0.5) *SIN(RADIANS(" + oldlon + " - " + insertlong + ")*0.5)), SQRT(1.0-(SIN(RADIANS(" + oldlat + " - " + insertlat + ")*0.5) *SIN(RADIANS(" + oldlat + " - " + insertlat + ")*0.5) +COS(RADIANS(" + insertlat + ")) * COS(RADIANS(" + oldlat + ")) *SIN(RADIANS(" + oldlon + " - " + insertlong + ")*0.5) *SIN(RADIANS(" + oldlon + " - " + insertlong + ")*0.5)) )) * 1609.344)/1000 AS distance";
																							ResultSet r1 = stinsert.executeQuery(s);
																							if(r1.next()) {
																								if(r1.getInt("distance") >= 1) {
																									location = GetWareHouseLocation(insertlat, insertlong, ownername, vehcode);
																									if(location.length() > 100) {
																										location = location.substring(0, 98);
																									}
																									oldlat = insertlat;
																									oldlon = insertlong;
																								}
																							}
																							DistCorrDateTimemils = DistCorrDateTime.getTime();
																							datetime = insertdate + " " + inserttime;
																							sdate = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(datetime);
																							sdatemils = sdate.getTime();
																							if(DistCorrDateTimemils < sdatemils) {
																								latestdata = "true";
																							} else {
																								latestdata = "false";
																							}
																							if(tbname.equals("t_veh0")) {
																								if(latestdata.equalsIgnoreCase("true")) {
																									InsertInAllConnectedUnits(insertdate, inserttime, unitid, "-", insertlat, insertlong, location);
																								}
																								sql = "select * from t_veh0 where TheFieldDataDate='" + insertdate + "' and TheFieldDataTime='" + inserttime + "' and UnitId='" + unitid + "' AND TheFiledTextFileName like '" + stamp + "%'  and CDistance='" + distance + "'";
																								ResultSet rstcheck = stcheck.executeQuery(sql);
																								if(rstcheck.next()) {} else {
																									sql = "insert into t_veh0 (UnitId,TheFieldDataDate,TheFieldDataTime,Latitude,LatitudeDir,Longitude,LongitudeDir,Speed,DirectionDegree,TheFiledTextFileName,TheFieldSubject,Distance,LatinDec,LonginDec,TheFieldDataStoredDate,TheFieldDataStoredTime,Sen1,Sen2,Sen3,Sen4,ZoneDesc,FuelLevel,EngineStatus,Thefielddatadatetime,RDataMailDateTime,RDataStoredTime,CRdist,ZoneID) values('" + unitid + "','" + insertdate + "','" + inserttime + "','" + lat + "','" + latdir + "','" + lon + "','" + londir + "','" + speed + "','" + dd + "','" + stamp + "','" + location + "','" + distance + "','" + insertlat + "','" + insertlong + "','" + storeddate + "','" + storedtime + "','" + sen1 + "','" + sen2 + "','" + sen3 + "','" + sen4 + "','" + sen5 + "','" + fluelflow + "','" + ENSTATUS + "','" + insertdate + " " + inserttime + "','" + RDataMaildateTime + "','" + RDataStoredDateTime + "','" + crr + "','" + pt + "')";
																									try {
																										stinsert.executeUpdate(sql);
																									} catch (Exception e) {
																										SaveException(e.toString(), "MailExtracter Greater than 6900 Processing at line 749 ");
																									}
																									if(token.contains("DT")) {
																										String sql11 = "insert into db_gps.t_sensordata (vehid,UnitID,TheFieldDataDate,TheFieldDataTime,DT,SD,RO,CO,FC,CZ,EC,DR,RZ,RP,DI) values('0','" + unitid + "','" + insertdate + "','" + inserttime + "','" + dst1 + "','" + sd + "','" + ro + "','" + co + "','" + fc + "','" + cz + "','" + ec + "','" + dr + "','" + rz + "','" + rp + "','" + dit1 + "')";
																										try {
																											stinsert.executeUpdate(sql11);
																										} catch (Exception e) {
																											SaveException(e.toString(), "MailExtracter Greater than 6900 Processing at line 749 ");
																										}
																									}
																									if(token.contains("HU")) {
																										String sql11 = "insert into db_gps.t_sensordata (vehid,UnitID,TheFieldDataDate,TheFieldDataTime,HU,TM,DB,SR,OZ,PU,RN,PR) values('0','" + unitid + "','" + insertdate + "','" + inserttime + "','" + hu + "','" + tm1 + "','" + db + "','" + sr + "','" + oz + "','" + pu + "','" + rn + "','" + pr + "')";
																										try {
																											stinsert.executeUpdate(sql11);
																										} catch (Exception e) {
																											SaveException(e.toString(), "MailExtracter Greater than 6900 Processing at line 749 ");
																										}
																									}
																								}
																							} else {
																								sql = "select * from " + tbname + " where TheFieldDataDate='" + insertdate + "' and TheFieldDataTime='" + inserttime + "' AND TheFiledTextFileName like '" + stamp + "%' and CDistance='" + distance + "'";
																								ResultSet rstcheck = stcheck.executeQuery(sql);
																								if(rstcheck.next()) {} else {
																									int speed1 = 0;
																									speed1 = (int) Double.parseDouble(speed);
																									String date_mv1 = "-",
																										insrtmvdate = "-";
																									java.util.Date date_mv = new Date();
																									date_mv = ((DateFormat) frt).parse(insertdate + " " + inserttime);
																									date_mv.setTime(date_mv.getTime() - VehMultiplicationFactor);
																									insrtmvdate = frt.format(date_mv);
																									String currentdatetime = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").format(new java.util.Date());
																									double direcdeg = 0.0;
																									direcdeg = Double.parseDouble(dd);
																									if(speed1 > 0) {
																										try {
																											sql = "insert into db_gps.t_movingdata (Vehid,DirectionDegree,Speed,Latitude,Longitude,DataDateTime,InsertDateTime) values('" + vehcode + "','" + direcdeg + "','" + speed1 + "','" + insertlat + "','" + insertlong + "','" + insrtmvdate + "','" + currentdatetime + "')";
																											stinsertonlinedata.executeUpdate(sql);
																										} catch (Exception e22) {}
																									}
																									if(stamp.equalsIgnoreCase("NG") || stamp.equalsIgnoreCase("NGPRS") || stamp.equalsIgnoreCase("NGSM")) {
																										int cc = 0;
																										sql = "insert into " + tbname + " (TheFieldDataDate,TheFieldDataTime,Latitude,LatitudeDir,Longitude,LongitudeDir,Speed,DirectionDegree,TheFiledTextFileName,TheFieldSubject,Distance,LatinDec,LonginDec,TheFieldDataStoredDate,TheFieldDataStoredTime,CDistance,Thefielddatadatetime,RDataMailDateTime,RDataStoredTime) values('" + insertdate + "','" + inserttime + "','" + lat + "','" + latdir + "','" + lon + "','" + londir + "','" + speed + "','" + dd + "','" + stamp + "','" + location + "'," + correctdistretun1 + ",'" + insertlat + "','" + insertlong + "','" + storeddate + "','" + storedtime + "'," + sdist + ",'" + insertdate + " " + inserttime + "','" + RDataMaildateTime + "','" + RDataStoredDateTime + "')";
																										cc = stinsert.executeUpdate(sql);
																										if(cc > 0) {}
																										if(cellDetails == true) {
																											String sqlcell = "insert into t_celldetails (vehiclecode,vehicleregnumber,ownername,unitid,thefielddatadatetime,stamp,signalstrength,cellid,networkoperator,latitude,longitude,location,RDataMailDateTime,RDataStoredTime) values ('" + vehcode + "','" + vehregno + "','" + ownername + "','" + unitid + "','" + insertdate + " " + inserttime + "','" + stamp + "','" + signalStrength + "','" + cellId + "','" + networkOperator + "','" + insertlat + "','" + insertlong + "','" + location + "','" + RDataMaildateTime + "','" + RDataStoredDateTime + "')";
																											stinsert.executeUpdate(sqlcell);
																										}
																										if(cellDetails1 == true) {
																											String sqlcell = "insert into t_celldetails (vehiclecode,vehicleregnumber,ownername,unitid,thefielddatadatetime,stamp,latitude,longitude,location,RDataMailDateTime,RDataStoredTime,mcc1,mnc1,lac1,cellid1,mcc2,mnc2,lac2,cellil2,mcc3,mnc3,lac3,cellid3,mcc4,mnc4,lac4,cellid4,mcc5,mnc5,lac5,cellid5,mcc6,mnc6,lac6,cellid6) values ('" + vehcode + "','" + vehregno + "','" + ownername + "','" + unitid + "','" + insertdate + " " + inserttime + "','" + stamp + "','" + insertlat + "','" + insertlong + "','" + location + "','" + RDataMaildateTime + "','" + RDataStoredDateTime + "','" + mcc1 + "','" + mnc1 + "','" + lac1 + "','" + cellid1 + "','" + mcc2 + "','" + mnc2 + "','" + lac2 + "','" + cellid2 + "','" + mcc3 + "','" + mnc3 + "','" + lac3 + "','" + cellid3 + "','" + mcc4 + "','" + mnc4 + "','" + lac4 + "','" + cellid4 + "','" + mcc5 + "','" + mnc5 + "','" + lac5 + "','" + cellid5 + "','" + mcc6 + "','" + mnc6 + "','" + lac6 + "','" + cellid6 + "')";
																											stinsert.executeUpdate(sqlcell);
																										}
																									} else {
																										flag = true;
																										if(DISTANCE_CORRECTION_STAMPS.contains(stamp) || DISTANCE_CORRECTION_DOOROPEN.contains(stamp) || DISTANCE_CORRECTION_DOORCLOSE.contains(stamp)) {
																											if(!(vehcode.equalsIgnoreCase("0"))) {
																												try {
																													sdist = Integer.parseInt(distance);
																												} catch (Exception e) {
																													sdist = Float.valueOf(distance).intValue();
																												}
																												validStamp = true;
																												correctdistretun1 = distanceCorrectionForUnsendData(vehcode, insertdate, inserttime, sdist, insertlat, insertlong, DistCorrFactor, AvgSpeed, stamp, latestdata, idledistance, DistType);
																												if(validStamp == false) {
																													if(DISTANCE_CORRECTION_DOOROPEN.contains(stamp) || DISTANCE_CORRECTION_DOORCLOSE.contains(stamp)) {
																														stamp = stamp + "Ignore";
																													} else {
																														stamp = stamp + "1";
																													}
																													try {
																														String insertosstamp = "";
																														stamprejectreason = "Lat Long Based Avgerage speed is Greater than Avg Speed Limit";
																														String osrejected = "select * from db_gps.t_osrejected where thedatetime = '" + insertdate + " " + inserttime + "' and stamp = '" + stamp + "' and vehcode = '" + vehcode + "' and unitid = '" + unitid + "' ";
																														ResultSet rsosrejected = stexception.executeQuery(osrejected);
																														if(rsosrejected.next()) {
																															insertosstamp = "update db_gps.t_osrejected set reason = '" + stamprejectreason + "',ProgramName = 'Processing',Latitude = '" + insertlat + "',Longitude= '" + insertlong + "',routeid = '-',zone = '-',speed = '" + speed + "',duration = '" + distance + "' where thedatetime = '" + insertdate + " " + inserttime + "' and stamp = '" + stamp + "' and vehcode = '" + vehcode + "' and unitid = '" + unitid + "' ";
																														} else {
																															insertosstamp = "insert into db_gps.t_osrejected (vehcode,vehregno,transporter,unitid,stamp,thedatetime,reason,ProgramName,Latitude,Longitude," + "routeid,zone,speed,duration) values ('" + vehcode + "','" + vehregno + "','" + ownername + "','" + unitid + "','" + stamp + "','" + insertdate + " " + inserttime + "','" + stamprejectreason + "','Processing','" + insertlat + "','" + insertlong + "','-','-','" + speed + "','" + distance + "') ";
																														}
																														stexception1.executeUpdate(insertosstamp);
																													} catch (Exception e) {
																														SaveException(e.toString(), "MailExtracter Greater than 6900 Processing at line 802 (!!!while inserting rejected stamp in table!!!)");
																													}
																												}
																											}
																										} else {
																											try {
																												correctdistretun1 = Integer.parseInt(distance);
																												sdist = Integer.parseInt(distance);
																											} catch (Exception e) {
																												correctdistretun1 = Float.valueOf(distance).intValue();
																												sdist = Float.valueOf(distance).intValue();
																											}
																											if(stamp.equalsIgnoreCase("AC")) {
																												stamprejectreason = "-";
																												vcode = Integer.parseInt(vehcode);
																												boolean rastatus = getGeofence(insertlat, insertlong, vcode, ownername);
																												if(rastatus == true) {
																													boolean changestamp = InsertInratable(vehcode, insertdate, inserttime, distance, speed, ownername, unitid);
																													if(changestamp == true) {
																														stamp = "AC1";
																													}
																												} else {
																													stamp = "AC1";
																													stamprejectreason = "RA cannot be within 500 m of geofence location";
																												}
																												if(stamp.equalsIgnoreCase("AC1")) {
																													try {
																														String insertosstamp = "";
																														String osrejected = "select * from db_gps.t_osrejected where thedatetime = '" + insertdate + " " + inserttime + "' and stamp = '" + stamp + "' and vehcode = '" + vehcode + "' and unitid = '" + unitid + "' ";
																														ResultSet rsosrejected = stexception2.executeQuery(osrejected);
																														if(rsosrejected.next()) {
																															insertosstamp = "update db_gps.t_osrejected set reason = '" + stamprejectreason + "',ProgramName = 'Processing',Latitude = '" + insertlat + "',Longitude= '" + insertlong + "',routeid = '-',zone = '-',speed = '" + speed + "',duration = '" + distance + "' where thedatetime = '" + insertdate + " " + inserttime + "' and stamp = '" + stamp + "' and vehcode = '" + vehcode + "' and unitid = '" + unitid + "' ";
																														} else {
																															insertosstamp = "insert into db_gps.t_osrejected (vehcode,vehregno,transporter,unitid,stamp,thedatetime,reason,ProgramName,Latitude,Longitude," + "routeid,zone,speed,duration) values ('" + vehcode + "','" + vehregno + "','" + ownername + "','" + unitid + "','" + stamp + "','" + insertdate + " " + inserttime + "','" + stamprejectreason + "','Processing','" + insertlat + "','" + insertlong + "','-','-','" + speed + "','" + distance + "') ";
																														}
																														stexception3.executeUpdate(insertosstamp);
																													} catch (Exception e) {
																														SaveException(e.toString(), "MailExtracter Greater than 6900 Processing at line 802 (!!!while inserting RA rejected stamp in table!!!)");
																													}
																												}
																											}
																											if(stamp.equalsIgnoreCase("DC")) {
																												stamprejectreason = "-";
																												vcode = Integer.parseInt(vehcode);
																												boolean rastatus = getGeofence(insertlat, insertlong, vcode, ownername);
																												if(rastatus == true) {
																													boolean changestamp = InsertInrdtable(vehcode, insertdate, inserttime, distance, speed, ownername, unitid);
																													if(changestamp == true) {
																														stamp = "DC1";
																													}
																												} else {
																													stamp = "DC1";
																													stamprejectreason = "RD cannot be within 500 m of geofence location";
																												}
																												if(stamp.equalsIgnoreCase("DC1")) {
																													try {
																														String insertosstamp = "";
																														String osrejected = "select * from db_gps.t_osrejected where thedatetime = '" + insertdate + " " + inserttime + "' and stamp = '" + stamp + "' and vehcode = '" + vehcode + "' and unitid = '" + unitid + "' ";
																														ResultSet rsosrejected = stexception4.executeQuery(osrejected);
																														if(rsosrejected.next()) {
																															insertosstamp = "update db_gps.t_osrejected set reason = '" + stamprejectreason + "',ProgramName = 'Processing',Latitude = '" + insertlat + "',Longitude= '" + insertlong + "',routeid = '-',zone = '-',speed = '" + speed + "',duration = '" + distance + "' where thedatetime = '" + insertdate + " " + inserttime + "' and stamp = '" + stamp + "' and vehcode = '" + vehcode + "' and unitid = '" + unitid + "' ";
																														} else {
																															insertosstamp = "insert into db_gps.t_osrejected (vehcode,vehregno,transporter,unitid,stamp,thedatetime,reason,ProgramName,Latitude,Longitude," + "routeid,zone,speed,duration) values ('" + vehcode + "','" + vehregno + "','" + ownername + "','" + unitid + "','" + stamp + "','" + insertdate + " " + inserttime + "','" + stamprejectreason + "','Processing','" + insertlat + "','" + insertlong + "','-','-','" + speed + "','" + distance + "') ";
																														}
																														stexception1.executeUpdate(insertosstamp);
																													} catch (Exception e) {
																														SaveException(e.toString(), "MailExtracter Greater than 6900 Processing at line 846 (!!!while inserting RD rejected stamp in table!!!)");
																													}
																												}
																											}
																											stamprejectreason = "-";
																											if(stamp.equalsIgnoreCase("OS")) {
																												vcode = Integer.parseInt(vehcode);
																												boolean rastatus = getGeofence(insertlat, insertlong, vcode, ownername);
																												if(rastatus == true) {
																													boolean changestamp = InsertInostable(vehcode, insertdate, inserttime, distance, speed, ownername, OverSpeedDurationInSecs, unitid);
																													if(changestamp == true) {
																														stamp = "OS3";
																													}
																												} else {
																													stamp = "OS3";
																													stamprejectreason = "OS cannot be within 500 m of geofence location,-,-";
																												}
																												if(stamp.equalsIgnoreCase("OS3")) {
																													try {
																														String routeid = "-",
																															zone = "-",
																															reason = "-";
																														try {
																															String ostoken[] = stamprejectreason.split(",");
																															reason = ostoken[0];
																															zone = ostoken[1];
																															routeid = ostoken[2];
																														} catch (Exception e) {
																															reason = stamprejectreason;
																															zone = "-";
																															routeid = "-";
																														}
																														String insertosstamp = "";
																														String osrejected = "select * from db_gps.t_osrejected where thedatetime = '" + insertdate + " " + inserttime + "' and stamp = '" + stamp + "' and vehcode = '" + vehcode + "' and unitid = '" + unitid + "' ";
																														ResultSet rsosrejected = stexception2.executeQuery(osrejected);
																														if(rsosrejected.next()) {
																															insertosstamp = "update db_gps.t_osrejected set reason = '" + reason + "',ProgramName = 'Processing',Latitude = '" + insertlat + "',Longitude= '" + insertlong + "',routeid = '" + routeid + "',zone = '" + zone + "',speed = '" + speed + "',duration = '" + distance + "' where thedatetime = '" + insertdate + " " + inserttime + "' and stamp = '" + stamp + "' and vehcode = '" + vehcode + "' and unitid = '" + unitid + "' ";
																														} else {
																															insertosstamp = "insert into db_gps.t_osrejected (vehcode,vehregno,transporter,unitid,stamp,thedatetime,reason,ProgramName,Latitude,Longitude," + "routeid,zone,speed,duration) values ('" + vehcode + "','" + vehregno + "','" + ownername + "','" + unitid + "','" + stamp + "','" + insertdate + " " + inserttime + "','" + reason + "','Processing','" + insertlat + "','" + insertlong + "','" + routeid + "','" + zone + "','" + speed + "','" + distance + "') ";
																														}
																														stexception3.executeUpdate(insertosstamp);
																													} catch (Exception ex) {
																														SaveException(ex.toString(), "MailExtracter Greater than 6900 Processing at line 850 (!!!while inserting os rejected stamp in table!!!)");
																													}
																												}
																												String OSDuplicatecheck = "select * from db_gps." + tbname + " where thefielddatadatetime = '" + insertdate + " " + inserttime + "' and TheFiledTextFileName = '" + stamp + "' ";
																												ResultSet rsosduplicate = stexception4.executeQuery(OSDuplicatecheck);
																												if(rsosduplicate.next()) {
																													flag = false;
																												}
																											}
																										}
																										if(flag == true) {
																											if(stamp.equalsIgnoreCase("CC")) {
																												sql = "insert into " + tbname + " (TheFieldDataDate,TheFieldDataTime,Latitude,LatitudeDir,Longitude,LongitudeDir,Speed,DirectionDegree,TheFiledTextFileName,TheFieldSubject,Distance,LatinDec,LonginDec,Sen1,TheFieldDataStoredDate,TheFieldDataStoredTime,CDistance,Thefielddatadatetime,RDataMailDateTime,RDataStoredTime,ToTheFieldDataDate,ToTheFieldDataTime,ToLatitude,ToLatitudeDir,ToLongitude,ToLongitudeDir) values('" + insertdate + "','" + inserttime + "','" + lat + "','" + latdir + "','" + lon + "','" + londir + "','" + speed + "','" + dd + "','" + stamp + "','" + location + "'," + correctdistretun1 + ",'" + insertlat + "','" + insertlong + "','" + routeFileCount + "','" + storeddate + "','" + storedtime + "'," + sdist + ",'" + insertdate + " " + inserttime + "','" + RDataMaildateTime + "','" + RDataStoredDateTime + "','" + insertdate1 + "','" + inserttime1 + "','" + lat11 + "','" + lat11dir + "','" + long11 + "','" + long11dir + "')";
																											} else if(adc2.contains("@")) {
																												sql = "insert into " + tbname + " (TheFieldDataDate,TheFieldDataTime,Latitude,LatitudeDir,Longitude,LongitudeDir,Speed,DirectionDegree,TheFiledTextFileName,TheFieldSubject,ZoneID,Distance,LatinDec,LonginDec,TheFieldDataStoredDate,TheFieldDataStoredTime,Sen1,Sen2,Sen3,Sen4,Sen6,Sen7,Sen8,Sen9,Sen10,Sen11,Sen12,Sen13,Sen14,Sen15,Sen16,Sen17,Sen18,Sen19,Sen20,ZoneDesc,EngineStatus,CDistance,Thefielddatadatetime,RDataMailDateTime,RDataStoredTime,CRdist) values('" + insertdate + "','" + inserttime + "','" + lat + "','" + latdir + "','" + lon + "','" + londir + "','" + speed + "','" + dd + "','" + stamp + "','" + location + "','" + point_id + "'," + correctdistretun1 + ",'" + insertlat + "','" + insertlong + "','" + storeddate + "','" + storedtime + "','" + sen1 + "','" + sen2 + "','" + sen3 + "','" + sen4 + "','" + sen6 + "','" + sen7 + "','" + sen8 + "','" + sen9 + "','" + sen10 + "','" + sen11 + "','" + sen12 + "','" + sen13 + "','" + sen14 + "','" + sen15 + "','" + sen16 + "','" + sen17 + "','" + sen18 + "','" + sen19 + "','" + sen20 + "','" + sen5 + "','" + ENSTATUS + "'," + sdist + ",'" + insertdate + " " + inserttime + "','" + RDataMaildateTime + "','" + RDataStoredDateTime + "','" + crr + "')";
																											} else if(unittype.equals("TEMPSENSOR") || unittype.equals("Camera")) {
																												sql = "insert into " + tbname + " (TheFieldDataDate,TheFieldDataTime,Latitude,LatitudeDir,Longitude,LongitudeDir,Speed,DirectionDegree,TheFiledTextFileName,TheFieldSubject,ZoneID,Distance,LatinDec,LonginDec,TheFieldDataStoredDate,TheFieldDataStoredTime,Sen1,Sen2,Sen3,Sen4,ZoneDesc,FuelLevel,CDistance,Thefielddatadatetime,RDataMailDateTime,RDataStoredTime,CRdist) values('" + insertdate + "','" + inserttime + "','" + lat + "','" + latdir + "','" + lon + "','" + londir + "','" + speed + "','" + dd + "','" + stamp + "','" + location + "','" + point_id + "'," + correctdistretun1 + ",'" + insertlat + "','" + insertlong + "','" + storeddate + "','" + storedtime + "','" + sen1 + "','" + sen2 + "','" + sen3 + "','" + sen4 + "','" + sen5 + "','" + fluelflow + "'," + sdist + ",'" + insertdate + " " + inserttime + "','" + RDataMaildateTime + "','" + RDataStoredDateTime + "','" + crr + "')";
																											} else if(unittype.equals("GENSETTRACK")) {
																												sql = "insert into " + tbname + " (TheFieldDataDate,TheFieldDataTime,Latitude,LatitudeDir,Longitude,LongitudeDir,Speed,DirectionDegree,TheFiledTextFileName,TheFieldSubject,ZoneID,Distance,LatinDec,LonginDec,TheFieldDataStoredDate,TheFieldDataStoredTime,Sen1,Sen2,Sen3,Sen4,FuelLevel,CDistance,ZoneDesc,Thefielddatadatetime,RDataMailDateTime,RDataStoredTime,CRdist) values('" + insertdate + "','" + inserttime + "','" + lat + "','" + latdir + "','" + lon + "','" + londir + "','" + speed + "','" + dd + "','" + stamp + "','" + location + "','" + point_id + "'," + correctdistretun1 + ",'" + insertlat + "','" + insertlong + "','" + storeddate + "','" + storedtime + "','" + sen1 + "','" + sen2 + "','" + sen3 + "','" + sen4 + "','" + fluelflow + "'," + sdist + ",'" + tstamp + "','" + insertdate + " " + inserttime + "','" + RDataMaildateTime + "','" + RDataStoredDateTime + "','" + crr + "')";
																											} else if(unittype.equals("FUELFLOW")) {
																												sql = "insert into " + tbname + " (TheFieldDataDate,TheFieldDataTime,Latitude,LatitudeDir,Longitude,LongitudeDir,Speed,DirectionDegree,TheFiledTextFileName,TheFieldSubject,ZoneID,Distance,LatinDec,LonginDec,TheFieldDataStoredDate,TheFieldDataStoredTime,Sen1,Sen2,Sen3,Sen4,FuelLevel,CDistance,EngineStatus,VoiceStatus,RegistrationNo,Thefielddatadatetime,RDataMailDateTime,RDataStoredTime,CRdist) values('" + insertdate + "','" + inserttime + "','" + lat + "','" + latdir + "','" + lon + "','" + londir + "','" + speed + "','" + dd + "','" + stamp + "','" + location + "','" + point_id + "'," + correctdistretun1 + ",'" + insertlat + "','" + insertlong + "','" + storeddate + "','" + storedtime + "','" + sen1 + "','" + sen2 + "','" + sen3 + "','" + sen4 + "','" + fuellevel + "'," + sdist + ",'" + ENSTATUS + "','" + IGSTATUS + "','" + RPM + "','" + insertdate + " " + inserttime + "','" + RDataMaildateTime + "','" + RDataStoredDateTime + "','" + crr + "')";
																											} else if(unittype.equalsIgnoreCase("SMARTCARD")) {
																												sql = "insert into " + tbname + " (TheFieldDataDate,TheFieldDataTime,Latitude,LatitudeDir,Longitude,LongitudeDir,Speed,DirectionDegree,TheFiledTextFileName,TheFieldSubject,ZoneID,Distance,LatinDec,LonginDec,Sen1,Sen2,TheFieldDataStoredDate,TheFieldDataStoredTime,CDistance,Thefielddatadatetime,RDataMailDateTime,RDataStoredTime,CRdist) values('" + insertdate + "','" + inserttime + "','" + lat + "','" + latdir + "','" + lon + "','" + londir + "','" + speed + "','" + dd + "','" + stamp + "','" + location + "','" + point_id + "'," + correctdistretun1 + ",'" + insertlat + "','" + insertlong + "','" + sen1 + "','" + sen2 + "','" + storeddate + "','" + storedtime + "'," + sdist + ",'" + insertdate + " " + inserttime + "','" + RDataMaildateTime + "','" + RDataStoredDateTime + "','" + crr + "')";
																												if("I".equalsIgnoreCase(sen2) || "O".equalsIgnoreCase(sen2)) {
																													String status = "";
																													if("I".equalsIgnoreCase(sen2)) {
																														status = "IN";
																													} else if("O".equalsIgnoreCase(sen2)) {
																														status = "OUT";
																													}
																													String sqlmapCardIdcardrefNo = "SELECT * FROM db_gps.t_cardid where CardRefNo='" + sen1 + "'";
																													ResultSet rscard = stinsert.executeQuery(sqlmapCardIdcardrefNo);
																													if(rscard.next()) {
																														cardId = rscard.getString("CardID");
																													} else {
																														cardId = "-";
																													}
																													String sqlinout = "insert into db_gps.t_inoutstudent (vehid,unitid,vehno,ownername,date,time,CardID,cardRefNo,status,location,lat,lon) values ('" + vehcode + "', '" + unitid + "','" + vehregno + "','" + ownername + "','" + insertdate + "','" + inserttime + "','" + cardId + "','" + sen1 + "','" + status + "','" + location + "','" + lat + "','" + lon + "')";
																													stinsert.executeUpdate(sqlinout);
																												}
																											} else if("JD".equalsIgnoreCase(stamp)) {
																												sql = "insert into " + tbname + " (TheFieldDataDate,TheFieldDataTime,Latitude,LatitudeDir,Longitude,LongitudeDir,Speed,DirectionDegree,TheFiledTextFileName,TheFieldSubject,Distance,LatinDec,LonginDec,Sen1,TheFieldDataStoredDate,TheFieldDataStoredTime,CDistance,Thefielddatadatetime,RDataMailDateTime,RDataStoredTime,CRdist) values('" + insertdate + "','" + inserttime + "','" + lat + "','" + latdir + "','" + lon + "','" + londir + "','" + speed + "','" + dd + "','" + stamp + "','" + location + "'," + correctdistretun1 + ",'" + insertlat + "','" + insertlong + "','" + routeFileCount + "','" + storeddate + "','" + storedtime + "'," + sdist + ",'" + insertdate + " " + inserttime + "','" + RDataMaildateTime + "','" + RDataStoredDateTime + "','" + crr + "')";
																												String routeid = "-";
																												String sqlftp = "select * from db_gps.t_ftplastdump where unitid='" + unitid + "'";
																												ResultSet rsftp = stinsert.executeQuery(sqlftp);
																												if(rsftp.next()) {
																													routeid = rsftp.getString("routeid");
																												}
																												if(!("-".equalsIgnoreCase(routeid))) {
																													int receivedFileCount = 0,
																														fileCount = 0;
																													String sqljrm = "select * from db_gps.t_newjrmstatus where unitid='" + unitid + "' and routeid='" + routeid + "' and jrmstatus='Pending'";
																													rsftp = stinsert.executeQuery(sqljrm);
																													if(rsftp.next()) {
																														receivedFileCount = Integer.parseInt(rsftp.getString("filereceived"));
																														fileCount = Integer.parseInt(rsftp.getString("fileCount"));
																														if(receivedFileCount < Integer.parseInt(routeFileCount)) {
																															String sqlupdt = "update db_gps.t_newjrmstatus set filereceived='" + routeFileCount + "',datetime1='" + insertdate + " " + inserttime + "' where unitid='" + unitid + "' and routeid='" + routeid + "' and jrmstatus='Pending'";
																															stunsendDataCorrection.executeUpdate(sqlupdt);
																															if(Integer.parseInt(routeFileCount) == fileCount) {
																																sqlupdt = "update db_gps.t_newjrmstatus set jrmstatus='Processed' where unitid='" + unitid + "' and routeid='" + routeid + "' and jrmstatus='Pending'";
																																stdefault.executeUpdate(sqlupdt);
																															}
																														}
																													}
																												}
																												String jdstamp = "insert into db_gps.t_jdstamps (VehCode,VehRegNo,UnitID,RouteID,FileRecieved)  values ('" + vehcode + "','" + vehregno + "','" + unitid + "','" + routeFileCount + "','" + adc2 + "')";
																												stdefault2.executeUpdate(jdstamp);
																											} else {
																												sql = "insert into " + tbname + " (TheFieldDataDate,TheFieldDataTime,Latitude,LatitudeDir,Longitude,LongitudeDir,Speed,DirectionDegree,TheFiledTextFileName,TheFieldSubject,Distance,LatinDec,LonginDec,TheFieldDataStoredDate,TheFieldDataStoredTime,CDistance,Thefielddatadatetime,RDataMailDateTime,RDataStoredTime,CRdist,ZoneID) values('" + insertdate + "','" + inserttime + "','" + lat + "','" + latdir + "','" + lon + "','" + londir + "','" + speed + "','" + dd + "','" + stamp + "','" + location + "'," + correctdistretun1 + ",'" + insertlat + "','" + insertlong + "','" + storeddate + "','" + storedtime + "'," + sdist + ",'" + insertdate + " " + inserttime + "','" + RDataMaildateTime + "','" + RDataStoredDateTime + "','" + crr + "','" + point_id + "')";
																											}
																										} else {
																											if(adc2.contains("@")) {
																												sql = "update db_gps." + tbname + " set Speed = '" + speed + "',Distance = '" + correctdistretun1 + "',CDistance = '" + sdist + "' where thefielddatadatetime = '" + insertdate + " " + inserttime + "' and TheFiledTextFileName = '" + stamp + "'";
																											} else if(unittype.equals("TEMPSENSOR") || unittype.equals("Camera")) {
																												sql = "update db_gps." + tbname + " set Speed = '" + speed + "',Distance = '" + correctdistretun1 + "',CDistance = '" + sdist + "' where thefielddatadatetime = '" + insertdate + " " + inserttime + "' and TheFiledTextFileName = '" + stamp + "'";
																											} else if(unittype.equals("GENSETTRACK")) {
																												sql = "update db_gps." + tbname + " set Speed = '" + speed + "',Distance = '" + correctdistretun1 + "',CDistance = '" + sdist + "' where thefielddatadatetime = '" + insertdate + " " + inserttime + "' and TheFiledTextFileName = '" + stamp + "'";
																											} else if(unittype.equals("FUELFLOW")) {
																												sql = "update db_gps." + tbname + " set Speed = '" + speed + "',Distance = '" + correctdistretun1 + "',CDistance = '" + sdist + "' where thefielddatadatetime = '" + insertdate + " " + inserttime + "' and TheFiledTextFileName = '" + stamp + "'";
																											} else if(unittype.equalsIgnoreCase("SMARTCARD")) {
																												sql = "update db_gps." + tbname + " set Speed = '" + speed + "',Distance = '" + correctdistretun1 + "',CDistance = '" + sdist + "' where thefielddatadatetime = '" + insertdate + " " + inserttime + "' and TheFiledTextFileName = '" + stamp + "'";
																												if("I".equalsIgnoreCase(sen2) || "O".equalsIgnoreCase(sen2)) {
																													String status = "";
																													if("I".equalsIgnoreCase(sen2)) {
																														status = "IN";
																													} else if("O".equalsIgnoreCase(sen2)) {
																														status = "OUT";
																													}
																													String sqlmapCardIdcardrefNo = "SELECT * FROM db_gps.t_cardid where CardRefNo='" + sen1 + "'";
																													ResultSet rscard = stinsert.executeQuery(sqlmapCardIdcardrefNo);
																													if(rscard.next()) {
																														cardId = rscard.getString("CardID");
																													} else {
																														cardId = "-";
																													}
																													String sqlinout = "insert into db_gps.t_inoutstudent (vehid,unitid,vehno,ownername,date,time,CardID,cardRefNo,status,location,lat,lon) values ('" + vehcode + "', '" + unitid + "','" + vehregno + "','" + ownername + "','" + insertdate + "','" + inserttime + "','" + cardId + "','" + sen1 + "','" + status + "','" + location + "','" + lat + "','" + lon + "')";
																													stinsert.executeUpdate(sqlinout);
																												}
																											} else if("JD".equalsIgnoreCase(stamp)) {
																												sql = "update db_gps." + tbname + " set Speed = '" + speed + "',Distance = '" + correctdistretun1 + "',CDistance = '" + sdist + "' where thefielddatadatetime = '" + insertdate + " " + inserttime + "' and TheFiledTextFileName = '" + stamp + "'";
																												String routeid = "-";
																												String sqlftp = "select * from db_gps.t_ftplastdump where unitid='" + unitid + "'";
																												ResultSet rsftp = stinsert.executeQuery(sqlftp);
																												if(rsftp.next()) {
																													routeid = rsftp.getString("routeid");
																												}
																												if(!("-".equalsIgnoreCase(routeid))) {
																													int receivedFileCount = 0,
																														fileCount = 0;
																													String sqljrm = "select * from db_gps.t_newjrmstatus where unitid='" + unitid + "' and routeid='" + routeid + "' and jrmstatus='Pending'";
																													rsftp = stinsert.executeQuery(sqljrm);
																													if(rsftp.next()) {
																														receivedFileCount = Integer.parseInt(rsftp.getString("filereceived"));
																														fileCount = Integer.parseInt(rsftp.getString("fileCount"));
																														if(receivedFileCount < Integer.parseInt(routeFileCount)) {
																															String sqlupdt = "update db_gps.t_newjrmstatus set filereceived='" + routeFileCount + "',datetime1='" + insertdate + " " + inserttime + "' where unitid='" + unitid + "' and routeid='" + routeid + "' and jrmstatus='Pending'";
																															stunsendDataCorrection.executeUpdate(sqlupdt);
																															if(Integer.parseInt(routeFileCount) == fileCount) {
																																sqlupdt = "update db_gps.t_newjrmstatus set jrmstatus='Processed' where unitid='" + unitid + "' and routeid='" + routeid + "' and jrmstatus='Pending'";
																																stdefault3.executeUpdate(sqlupdt);
																															}
																														}
																													}
																												}
																												String jdstamp = "insert into db_gps.t_jdstamps (VehCode,VehRegNo,UnitID,RouteID,FileRecieved)  values ('" + vehcode + "','" + vehregno + "','" + unitid + "','" + routeFileCount + "','" + adc2 + "')";
																												stdefault4.executeUpdate(jdstamp);
																											} else {
																												sql = "update db_gps." + tbname + " set Speed = '" + speed + "',Distance = '" + correctdistretun1 + "',CDistance = '" + sdist + "' where thefielddatadatetime = '" + insertdate + " " + inserttime + "' and TheFiledTextFileName = '" + stamp + "'";
																											}
																										}
																										try {
																											stinsert.executeUpdate(sql);
																											if(!(sen19.equals("-"))) {
																												String sql31 = "Select Sen19 from t_veh" + vehcode + " where thefielddatadatetime < '" + insertdate + " " + inserttime + "'   order by thefielddatadatetime desc limit 1";
																												ResultSet rst3;
																												rst3 = st12.executeQuery(sql31);
																												if(rst3.next()) {
																													Sensors = rst3.getString("Sen19");
																													Sens19 = Double.parseDouble(sen19);
																													if(!(Sensors.equals("-"))) {
																														Sensor19 = Double.parseDouble(Sensors);
																														if((Sens19 == 0 || Sens19 == 0.00) && (Sensor19 > 0)) {
																															String sql10 = "insert into " + tbname + " (TheFieldDataDate,TheFieldDataTime,Latitude,LatitudeDir,Longitude,LongitudeDir,Speed,DirectionDegree,TheFiledTextFileName,TheFieldSubject,ZoneID,Distance,LatinDec,LonginDec,TheFieldDataStoredDate,TheFieldDataStoredTime,Sen1,Sen2,Sen3,Sen4,Sen6,Sen7,Sen8,Sen9,Sen10,Sen11,Sen12,Sen13,Sen14,Sen15,Sen16,Sen17,Sen18,Sen19,Sen20,ZoneDesc,EngineStatus,CDistance,Thefielddatadatetime,RDataMailDateTime,RDataStoredTime,CRdist) values('" + insertdate + "','" + inserttime + "','" + lat + "','" + latdir + "','" + lon + "','" + londir + "','" + speed + "','" + dd + "','PF','" + location + "','" + point_id + "'," + correctdistretun1 + ",'" + insertlat + "','" + insertlong + "','" + storeddate + "','" + storedtime + "','" + sen1 + "','" + sen2 + "','" + sen3 + "','" + sen4 + "','" + sen6 + "','" + sen7 + "','" + sen8 + "','" + sen9 + "','" + sen10 + "','" + sen11 + "','" + sen12 + "','" + sen13 + "','" + sen14 + "','" + sen15 + "','" + sen16 + "','" + sen17 + "','" + sen18 + "','" + sen19 + "','" + sen20 + "','" + sen5 + "','" + ENSTATUS + "'," + sdist + ",'" + insertdate + " " + inserttime + "','" + RDataMaildateTime + "','" + RDataStoredDateTime + "','" + crr + "')";
																															st10.executeUpdate(sql10);
																															PowerStamp = "PF";
																														} else if(Sens19 > 0 && Sensor19 == 0) {
																															String sql10 = "insert into " + tbname + " (TheFieldDataDate,TheFieldDataTime,Latitude,LatitudeDir,Longitude,LongitudeDir,Speed,DirectionDegree,TheFiledTextFileName,TheFieldSubject,ZoneID,Distance,LatinDec,LonginDec,TheFieldDataStoredDate,TheFieldDataStoredTime,Sen1,Sen2,Sen3,Sen4,Sen6,Sen7,Sen8,Sen9,Sen10,Sen11,Sen12,Sen13,Sen14,Sen15,Sen16,Sen17,Sen18,Sen19,Sen20,ZoneDesc,EngineStatus,CDistance,Thefielddatadatetime,RDataMailDateTime,RDataStoredTime,CRdist) values('" + insertdate + "','" + inserttime + "','" + lat + "','" + latdir + "','" + lon + "','" + londir + "','" + speed + "','" + dd + "','PO','" + location + "','" + point_id + "'," + correctdistretun1 + ",'" + insertlat + "','" + insertlong + "','" + storeddate + "','" + storedtime + "','" + sen1 + "','" + sen2 + "','" + sen3 + "','" + sen4 + "','" + sen6 + "','" + sen7 + "','" + sen8 + "','" + sen9 + "','" + sen10 + "','" + sen11 + "','" + sen12 + "','" + sen13 + "','" + sen14 + "','" + sen15 + "','" + sen16 + "','" + sen17 + "','" + sen18 + "','" + sen19 + "','" + sen20 + "','" + sen5 + "','" + ENSTATUS + "'," + sdist + ",'" + insertdate + " " + inserttime + "','" + RDataMaildateTime + "','" + RDataStoredDateTime + "','" + crr + "')";
																															st10.executeUpdate(sql10);
																															String sql11 = "insert into " + tbname + " (TheFieldDataDate,TheFieldDataTime,Latitude,LatitudeDir,Longitude,LongitudeDir,Speed,DirectionDegree,TheFiledTextFileName,TheFieldSubject,ZoneID,Distance,LatinDec,LonginDec,TheFieldDataStoredDate,TheFieldDataStoredTime,Sen1,Sen2,Sen3,Sen4,Sen6,Sen7,Sen8,Sen9,Sen10,Sen11,Sen12,Sen13,Sen14,Sen15,Sen16,Sen17,Sen18,Sen19,Sen20,ZoneDesc,EngineStatus,CDistance,Thefielddatadatetime,RDataMailDateTime,RDataStoredTime,CRdist) values('" + insertdate + "','" + inserttime + "','" + lat + "','" + latdir + "','" + lon + "','" + londir + "','" + speed + "','" + dd + "','ON','" + location + "','" + point_id + "'," + correctdistretun1 + ",'" + insertlat + "','" + insertlong + "','" + storeddate + "','" + storedtime + "','" + sen1 + "','" + sen2 + "','" + sen3 + "','" + sen4 + "','" + sen6 + "','" + sen7 + "','" + sen8 + "','" + sen9 + "','" + sen10 + "','" + sen11 + "','" + sen12 + "','" + sen13 + "','" + sen14 + "','" + sen15 + "','" + sen16 + "','" + sen17 + "','" + sen18 + "','" + sen19 + "','" + sen20 + "','" + sen5 + "','" + ENSTATUS + "'," + sdist + ",'" + insertdate + " " + inserttime + "','" + RDataMaildateTime + "','" + RDataStoredDateTime + "','" + crr + "')";
																															st11.executeUpdate(sql11);
																															PowerStamp = "PO";
																														}
																													}
																												} else {}
																											}
																											String Diff = "",
																												speedmax = "",
																												TheFieldDataDate = "",
																												TheFieldDataTime = "",
																												Latitude = "",
																												LatitudeDir = "",
																												Longitude = "",
																												LongitudeDir = "",
																												Speed = "",
																												DirectionDegree = "",
																												TheFiledTextFileName = "",
																												TheFieldSubject = "",
																												ZoneID = "",
																												Distance = "",
																												LatinDec = "",
																												LonginDec = "",
																												TheFieldDataStoredDate = "",
																												TheFieldDataStoredTime = "",
																												Sen1 = "",
																												Sen2 = "",
																												Sen3 = "",
																												Sen4 = "",
																												Sen6 = "",
																												Sen7 = "",
																												Sen8 = "",
																												Sen9 = "",
																												Sen10 = "",
																												Sen11 = "",
																												Sen12 = "",
																												Sen13 = "",
																												Sen14 = "",
																												Sen15 = "",
																												Sen16 = "",
																												Sen17 = "",
																												Sen18 = "",
																												Sen19 = "",
																												Sen20 = "",
																												ZoneDesc = "",
																												EngineStatus = "",
																												CDistance = "",
																												Thefielddatadatetime = "",
																												RDataMailDateTime = "",
																												RDataStoredTime = "",
																												CRdist = "";
																											int Diff1 = 0;
																											if(stamp.equals("SE")) {
																												String vehdata = "select * from " + tbname + " where TheFiledTextFileName='SS' and Thefielddatadatetime > ('" + insertdate + " " + inserttime + "' - INTERVAL 2 Hour) and Thefielddatadatetime < '" + insertdate + " " + inserttime + "' order by Thefielddatadatetime desc limit 1";
																												ResultSet rsvehdata = st6.executeQuery(vehdata);
																												if(rsvehdata.next()) {
																													TheFieldDataDate = rsvehdata.getString("TheFieldDataDate");
																													TheFieldDataTime = rsvehdata.getString("TheFieldDataTime");
																													Latitude = rsvehdata.getString("Latitude");
																													LatitudeDir = rsvehdata.getString("LatitudeDir");
																													Longitude = rsvehdata.getString("Longitude");
																													LongitudeDir = rsvehdata.getString("LongitudeDir");
																													Speed = rsvehdata.getString("Speed");
																													DirectionDegree = rsvehdata.getString("DirectionDegree");
																													TheFiledTextFileName = rsvehdata.getString("TheFiledTextFileName");
																													TheFieldSubject = rsvehdata.getString("TheFieldSubject");
																													ZoneID = rsvehdata.getString("ZoneID");
																													Distance = rsvehdata.getString("Distance");
																													LatinDec = rsvehdata.getString("LatinDec");
																													LonginDec = rsvehdata.getString("LonginDec");
																													TheFieldDataStoredDate = rsvehdata.getString("TheFieldDataStoredDate");
																													TheFieldDataStoredTime = rsvehdata.getString("TheFieldDataStoredTime");
																													Sen1 = rsvehdata.getString("Sen1");
																													Sen2 = rsvehdata.getString("Sen2");
																													Sen3 = rsvehdata.getString("Sen3");
																													Sen4 = rsvehdata.getString("Sen4");
																													Sen6 = rsvehdata.getString("Sen6");
																													Sen7 = rsvehdata.getString("Sen7");
																													Sen8 = rsvehdata.getString("Sen8");
																													Sen9 = rsvehdata.getString("Sen9");
																													Sen10 = rsvehdata.getString("Sen10");
																													Sen11 = rsvehdata.getString("Sen11");
																													Sen12 = rsvehdata.getString("Sen12");
																													Sen13 = rsvehdata.getString("Sen13");
																													Sen14 = rsvehdata.getString("Sen14");
																													Sen15 = rsvehdata.getString("Sen15");
																													Sen16 = rsvehdata.getString("Sen16");
																													Sen17 = rsvehdata.getString("Sen17");
																													Sen18 = rsvehdata.getString("Sen18");
																													Sen19 = rsvehdata.getString("Sen19");
																													Sen20 = rsvehdata.getString("Sen20");
																													ZoneDesc = rsvehdata.getString("ZoneDesc");
																													EngineStatus = rsvehdata.getString("EngineStatus");
																													CDistance = rsvehdata.getString("CDistance");
																													Thefielddatadatetime = rsvehdata.getString("Thefielddatadatetime");
																													RDataMailDateTime = rsvehdata.getString("RDataMailDateTime");
																													RDataStoredTime = rsvehdata.getString("RDataStoredTime");
																													CRdist = rsvehdata.getString("CRdist");
																													String SEFound = "select * from " + tbname + " where TheFiledTextFileName='SE' and Thefielddatadatetime > '" + Thefielddatadatetime + "' and Thefielddatadatetime < '" + insertdate + " " + inserttime + "'";
																													ResultSet rsSEFound = st5.executeQuery(SEFound);
																													if(rsSEFound.next()) {} else {
																														String diff = "SELECT TIME_TO_SEC(timediff('" + insertdate + " " + inserttime + "','" + Thefielddatadatetime + "')) as Diff";
																														ResultSet rsdiff = st7.executeQuery(diff);
																														if(rsdiff.next()) {
																															Diff = rsdiff.getString("Diff");
																															Diff1 = rsdiff.getInt("Diff");
																														}
																														String maxspeed = "select max(Speed) as MaxSpeed from " + tbname + " where  Thefielddatadatetime >= '" + Thefielddatadatetime + "' and Thefielddatadatetime <= '" + insertdate + " " + inserttime + "' ";
																														ResultSet rsmaxspeed = st8.executeQuery(maxspeed);
																														if(rsmaxspeed.next()) {
																															speedmax = rsmaxspeed.getString("MaxSpeed");
																														}
																														if(Diff1 > 10) {
																															String OSDuplicatecheck = "select * from db_gps." + tbname + " where thefielddatadatetime = '" + insertdate + " " + inserttime + "' and TheFiledTextFileName ='OS' ";
																															ResultSet rsosduplicate = stexception4.executeQuery(OSDuplicatecheck);
																															if(rsosduplicate.next()) {} else {
																																String sqlos = "insert into " + tbname + " (TheFieldDataDate,TheFieldDataTime,Latitude,LatitudeDir,Longitude,LongitudeDir,Speed,DirectionDegree,TheFiledTextFileName,TheFieldSubject,ZoneID,Distance,LatinDec,LonginDec,TheFieldDataStoredDate,TheFieldDataStoredTime,Sen1,Sen2,Sen3,Sen4,Sen6,Sen7,Sen8,Sen9,Sen10,Sen11,Sen12,Sen13,Sen14,Sen15,Sen16,Sen17,Sen18,Sen19,Sen20,ZoneDesc,EngineStatus,CDistance,Thefielddatadatetime,RDataMailDateTime,RDataStoredTime,CRdist) values('" + TheFieldDataDate + "','" + TheFieldDataTime + "','" + Latitude + "','" + LatitudeDir + "','" + Longitude + "','" + LongitudeDir + "','" + speedmax + "','" + DirectionDegree + "','OS','" + TheFieldSubject + "','" + ZoneID + "','" + Diff + "','" + LatinDec + "','" + LonginDec + "','" + TheFieldDataStoredDate + "','" + TheFieldDataStoredTime + "','" + Sen1 + "','" + Sen2 + "','" + Sen3 + "','" + Sen4 + "','" + Sen6 + "','" + Sen7 + "','" + Sen8 + "','" + Sen9 + "','" + Sen10 + "','" + Sen11 + "','" + Sen12 + "','" + Sen13 + "','" + Sen14 + "','" + Sen15 + "','" + Sen16 + "','" + Sen17 + "','" + Sen18 + "','" + Sen19 + "','" + Sen20 + "','" + ZoneDesc + "','" + EngineStatus + "'," + CDistance + ",'" + Thefielddatadatetime + "','" + RDataMailDateTime + "','" + RDataStoredTime + "','" + CRdist + "')";
																																st9.executeUpdate(sqlos);
																															}
																														}
																													}
																												} else {}
																											} else if(stamp.equals("SS")) {
																												String vehdata1 = "select * from " + tbname + " where TheFiledTextFileName='SE' and Thefielddatadatetime > ('" + insertdate + " " + inserttime + "' + INTERVAL 2 Hour)  order by Thefielddatadatetime asc limit 1";
																												ResultSet rsvehdata1 = st6.executeQuery(vehdata1);
																												if(rsvehdata1.next()) {
																													Thefielddatadatetime = rsvehdata1.getString("Thefielddatadatetime");
																													String SSFound = "select * from " + tbname + " where TheFiledTextFileName='SS' and Thefielddatadatetime < '" + Thefielddatadatetime + "' and Thefielddatadatetime > '" + insertdate + " " + inserttime + "'";
																													ResultSet rsSSFound = st5.executeQuery(SSFound);
																													if(rsSSFound.next()) {} else {
																														String diff = "SELECT TIME_TO_SEC(timediff('" + Thefielddatadatetime + "','" + insertdate + " " + inserttime + "')) as Diff";
																														ResultSet rsdiff = st7.executeQuery(diff);
																														if(rsdiff.next()) {
																															Diff = rsdiff.getString("Diff");
																															Diff1 = rsdiff.getInt("Diff");
																														}
																														if(Diff1 > 10) {
																															String OSDuplicatecheck = "select * from db_gps." + tbname + " where thefielddatadatetime = '" + insertdate + " " + inserttime + "' and TheFiledTextFileName ='OS' ";
																															ResultSet rsosduplicate = stexception4.executeQuery(OSDuplicatecheck);
																															if(rsosduplicate.next()) {} else {
																																String maxspeed = "select max(Speed) as MaxSpeed from " + tbname + " where  Thefielddatadatetime <= '" + Thefielddatadatetime + "' and Thefielddatadatetime >= '" + insertdate + " " + inserttime + "' ";
																																ResultSet rsmaxspeed = st8.executeQuery(maxspeed);
																																if(rsmaxspeed.next()) {
																																	speedmax = rsmaxspeed.getString("MaxSpeed");
																																}
																																String sqlos = "insert into " + tbname + " (TheFieldDataDate,TheFieldDataTime,Latitude,LatitudeDir,Longitude,LongitudeDir,Speed,DirectionDegree,TheFiledTextFileName,TheFieldSubject,ZoneID,Distance,LatinDec,LonginDec,TheFieldDataStoredDate,TheFieldDataStoredTime,Sen1,Sen2,Sen3,Sen4,Sen6,Sen7,Sen8,Sen9,Sen10,Sen11,Sen12,Sen13,Sen14,Sen15,Sen16,Sen17,Sen18,Sen19,Sen20,ZoneDesc,EngineStatus,CDistance,Thefielddatadatetime,RDataMailDateTime,RDataStoredTime,CRdist) values('" + insertdate + "','" + inserttime + "','" + lat + "','" + latdir + "','" + lon + "','" + londir + "','" + maxspeed + "','" + dd + "','OS','" + location + "','" + point_id + "','" + Diff + "','" + insertlat + "','" + insertlong + "','" + storeddate + "','" + storedtime + "','" + sen1 + "','" + sen2 + "','" + sen3 + "','" + sen4 + "','" + sen6 + "','" + sen7 + "','" + sen8 + "','" + sen9 + "','" + sen10 + "','" + sen11 + "','" + sen12 + "','" + sen13 + "','" + sen14 + "','" + sen15 + "','" + sen16 + "','" + sen17 + "','" + sen18 + "','" + sen19 + "','" + sen20 + "','" + sen5 + "','" + ENSTATUS + "'," + sdist + ",'" + insertdate + " " + inserttime + "','" + RDataMaildateTime + "','" + RDataStoredDateTime + "','" + crr + "')";
																																st9.executeUpdate(sqlos);
																															}
																														}
																													}
																												} else {}
																											}
																										} catch (Exception e) {}
																										if(token.contains("DT")) {
																											String sql11 = "insert into db_gps.t_sensordata (vehid,UnitID,TheFieldDataDate,TheFieldDataTime,DT,SD,RO,CO,FC,CZ,EC,DR,RZ,RP,DI) values('" + vehcode + "','" + unitid + "','" + insertdate + "','" + inserttime + "','" + dst1 + "','" + sd + "','" + ro + "','" + co + "','" + fc + "','" + cz + "','" + ec + "','" + dr + "','" + rz + "','" + rp + "','" + dit1 + "')";
																											try {
																												stinsert.executeUpdate(sql11);
																											} catch (Exception e) {
																												SaveException(e.toString(), "MailExtracter Greater than 6900 Processing at line 749 ");
																											}
																										}
																										if(token.contains("HU")) {
																											String sql11 = "insert into db_gps.t_sensordata (vehid,UnitID,TheFieldDataDate,TheFieldDataTime,HU,TM,DB,SR,OZ,PU,RN,PR) values('" + vehcode + "','" + unitid + "','" + insertdate + "','" + inserttime + "','" + hu + "','" + tm1 + "','" + db + "','" + sr + "','" + oz + "','" + pu + "','" + rn + "','" + pr + "')";
																											try {
																												stinsert.executeUpdate(sql11);
																											} catch (Exception e) {
																												SaveException(e.toString(), "MailExtracter Greater than 6900 Processing at line 749 ");
																											}
																										}
																										if(cellDetails == true) {
																											String sqlcell = "insert into t_celldetails (vehiclecode,vehicleregnumber,ownername,unitid,thefielddatadatetime,stamp,signalstrength,cellid,networkoperator,latitude,longitude,location,RDataMailDateTime,RDataStoredTime) values ('" + vehcode + "','" + vehregno + "','" + ownername + "','" + unitid + "','" + insertdate + " " + inserttime + "','" + stamp + "','" + signalStrength + "','" + cellId + "','" + networkOperator + "','" + insertlat + "','" + insertlong + "','" + location + "','" + RDataMaildateTime + "','" + RDataStoredDateTime + "')";
																											stinsert.executeUpdate(sqlcell);
																										}
																										if(cellDetails1 == true) {
																											String sqlcell = "insert into t_celldetails (vehiclecode,vehicleregnumber,ownername,unitid,thefielddatadatetime,stamp,latitude,longitude,location,RDataMailDateTime,RDataStoredTime,mcc1,mnc1,lac1,cellid1,mcc2,mnc2,lac2,cellid2,mcc3,mnc3,lac3,cellid3,mcc4,mnc4,lac4,cellid4,mcc5,mnc5,lac5,cellid5,mcc6,mnc6,lac6,cellid6) values ('" + vehcode + "','" + vehregno + "','" + ownername + "','" + unitid + "','" + insertdate + " " + inserttime + "','" + stamp + "','" + insertlat + "','" + insertlong + "','" + location + "','" + RDataMaildateTime + "','" + RDataStoredDateTime + "','" + mcc1 + "','" + mnc1 + "','" + lac1 + "','" + cellid1 + "','" + mcc2 + "','" + mnc2 + "','" + lac2 + "','" + cellid2 + "','" + mcc3 + "','" + mnc3 + "','" + lac3 + "','" + cellid3 + "','" + mcc4 + "','" + mnc4 + "','" + lac4 + "','" + cellid4 + "','" + mcc5 + "','" + mnc5 + "','" + lac5 + "','" + cellid5 + "','" + mcc6 + "','" + mnc6 + "','" + lac6 + "','" + cellid6 + "')";
																											stinsert.executeUpdate(sqlcell);
																										}
																										try {
																											java.util.Date sysDate = new java.util.Date();
																											String dt_systemdate = new SimpleDateFormat("yyyy-MM-dd").format(sysDate);
																											int days1 = 0;
																											String sqldays = "select DATEDIFF('" + insertdate + "' , '" + dt_systemdate + "') as days";
																											ResultSet rstdays1 = stinsert3.executeQuery(sqldays);
																											if(rstdays.next()) {
																												days1 = rstdays.getInt("days");
																											}
																											String daysdiff = Integer.toString(days1);
																											if(daysdiff.contains("-")) {
																												String datedt = "",
																													timetm = "",
																													endlocation = "No Data";
																												String kmgrt1000 = "-";
																												double startkm = 0,
																													endkm = 0,
																													LastDaykm = 0,
																													distinmonth = 0;
																												double kmtravelled = 0;
																												String sql11 = "Select Distance,TheFieldDataDate,thefielddatatime from " + tbname + " where thefielddatadate <'" + insertdate + "' and TheFiledTextFileName in('SI','ON','OF','ST','SP') order by thefielddatadate desc,thefielddatatime desc limit 1";
																												ResultSet rs1 = stinsert1.executeQuery(sql11);
																												if(rs1.next()) {
																													startkm = rs1.getDouble("Distance");
																													datedt = rs1.getString("TheFieldDataDate");
																													timetm = rs1.getString("thefielddatatime");
																												} else {
																													String sql12 = "Select Distance,TheFieldDataDate,thefielddatatime from " + tbname + " where thefielddatadate ='" + insertdate + "' and TheFiledTextFileName in('SI','ON','OF','ST','SP') order by thefielddatadate desc,thefielddatatime asc limit 1";
																													ResultSet rs11 = st.executeQuery(sql12);
																													if(rs11.next()) {
																														startkm = rs11.getDouble("Distance");
																														datedt = rs11.getString("TheFieldDataDate");
																														timetm = rs11.getString("thefielddatatime");
																													}
																												}
																												String sql2 = "Select Distance,thefielddatadate,thefielddatatime,thefieldsubject from " + tbname + " where thefielddatadate='" + insertdate + "' and TheFiledTextFileName in('SI','ON','OF','ST','SP') order by thefielddatatime Desc limit 1";
																												ResultSet rs2 = stinsert3.executeQuery(sql2);
																												if(rs2.next()) {
																													String pdate = "",
																														ptime = "",
																														psubj = "";
																													endkm = rs2.getDouble("Distance");
																													pdate = new SimpleDateFormat("dd-MMM-yy").format(new SimpleDateFormat("yyyy-MM-dd").parse(rs2.getString("thefielddatadate")));
																													ptime = rs2.getString("thefielddatatime");
																													psubj = rs2.getString("thefieldsubject");
																													endlocation = pdate + " " + ptime + " " + psubj;
																													kmtravelled = endkm - startkm;
																												}
																												if((kmtravelled < 0)) {
																													kmtravelled = getcorrectedkm(Integer.valueOf(vehcode).intValue(), insertdate);
																												}
																												String upsql = "Select * from db_gpsExceptions.t_veh" + vehcode + "_ds where Thedate='" + insertdate + "' ";
																												ResultSet updaters = stexceptioncheck.executeQuery(upsql);
																												if(updaters.next()) {
																													String vehupsql = " update db_gpsExceptions.t_veh" + vehcode + "_ds set VehCode='" + vehcode + "',Distance='" + kmtravelled + "',Location='" + endlocation + "' where TheDate='" + insertdate + "'";
																													stexception.executeUpdate(vehupsql);
																												} else {
																													String vehds = "insert into db_gpsExceptions.t_veh" + vehcode + "_ds (TheDate,distance,Location,vehcode,UnitId,Version) values('" + insertdate + "','" + kmtravelled + "','" + endlocation + "','" + vehcode + "','" + unitid + "','-')";
																													stexception.executeUpdate(vehds);
																												}
																												String allq = "",
																													allinsert = "";
																												String sqlall = "select Distance from db_gpsExceptions.t_vehall_ds where Thedate='" + insertdate + "' and VehCode='" + vehcode + "'";
																												ResultSet allrs = stexceptioncheck.executeQuery(sqlall);
																												if(allrs.next()) {
																													allq = "update db_gpsExceptions.t_vehall_ds set VehCode='" + vehcode + "',Distance='" + kmtravelled + "',Location='" + endlocation + "' where TheDate='" + insertdate + "' and VehCode='" + vehcode + "'";
																													stexception3.executeUpdate(allq);
																												} else {
																													allinsert = "insert into db_gpsExceptions.t_vehall_ds (thedate,distance,Location,vehcode,UnitId,Version)values('" + insertdate + "','" + kmtravelled + "','" + endlocation + "','" + vehcode + "','" + unitid + "','-') ";
																													stexception3.executeUpdate(allinsert);
																												}
																											}
																										} catch (Exception e22) {}
																										String newaddsql = "";
																										if(stamp.equalsIgnoreCase("PF") || PowerStamp.equalsIgnoreCase("PF")) {
																											newaddsql = "insert into t_poweroff(VehCode,TheDate,TheTime,Lat,Lon)values('" + vehcode + "','" + insertdate + "','" + inserttime + "','" + lat + "','" + lon + "')";
																										} else if(stamp.equalsIgnoreCase("PO") || PowerStamp.equalsIgnoreCase("PO")) {
																											newaddsql = "insert into t_poweron(VehCode,TheDate,TheTime,Lat,Lon)values('" + vehcode + "','" + insertdate + "','" + inserttime + "','" + lat + "','" + lon + "')";
																										} else if(stamp.equalsIgnoreCase("BL")) {
																											newaddsql = "insert into t_lowbattery(VehCode,TheDate,TheTime,Lat,Lon)values('" + vehcode + "','" + insertdate + "','" + inserttime + "','" + lat + "','" + lon + "')";
																										} else if(stamp.equalsIgnoreCase("NG")) {
																											newaddsql = "insert into t_nginformation(VehCode,TheDate,TheTime,Lat,Lon)values('" + vehcode + "','" + insertdate + "','" + inserttime + "','" + lat + "','" + lon + "')";
																										} else if(stamp.contains("DO")) {
																											newaddsql = "insert into t_dooropen(VehCode,stamp,TheDate,TheTime,Lat,Lon,location)values('" + vehcode + "','" + stamp + "','" + insertdate + "','" + inserttime + "','" + insertlat + "','" + insertlong + "','" + location + "')";
																										} else if(stamp.contains("DS")) {
																											newaddsql = "insert into t_doorclose (VehCode,stamp,TheDate,TheTime,Lat,Lon,location)values('" + vehcode + "','" + stamp + "','" + insertdate + "','" + inserttime + "','" + insertlat + "','" + insertlong + "','" + location + "')";
																										} else {}
																										if(!newaddsql.equals("")) {
																											try {
																												st5.executeUpdate(newaddsql);
																											} catch (Exception e) {}
																										}
																									}
																								}
																								if(latestdata.equalsIgnoreCase("true")) {
																									InsertInOnlinedata(insertdate, inserttime, vehcode, vehregno, stamp, insertlat, insertlong, speed, correctdistretun1, location, ownername, unitid, sen1, sen2, sen3, sen4, sen5, fuellevel, ENSTATUS, dd);
																									InsertInAllConnectedUnits(insertdate, inserttime, unitid, vehregno, insertlat, insertlong, location);
																								}
																								updateyesterkminonlinedata(insertdate, inserttime, vehcode);
																							}
																						}
																					} else {
																						InsertInvalidData(srno, unitid, orignalstamp, storeddate, storedtime, "Distance Problem");
																					}
																				}
																			} else {
																				InsertInvalidData(srno, unitid, orignalstamp, storeddate, storedtime, "Speed Problem");
																			}
																		}
																	} else {
																		InsertInvalidData(srno, unitid, orignalstamp, storeddate, storedtime, "Direction Degree Problem");
																	}
																}
															} else {
																InsertInvalidData(srno, unitid, orignalstamp, storeddate, storedtime, "Longitude Problem");
															}
														}
													} else {
														InsertInvalidData(srno, unitid, orignalstamp, storeddate, storedtime, "Latitude Problem");
													}
												}
											} else {
												InsertInvalidData(srno, unitid, orignalstamp, storeddate, storedtime, "Time Problem");
											}
										}
									} else {
										InsertInvalidData(srno, unitid, orignalstamp, storeddate, storedtime, "Date Problem");
									}
								}
							}
							if("false".equalsIgnoreCase(latestdata)) {
								if(tbname.equals("t_veh0")) {} else {
									String sqlvehcode = "SELECT * FROM db_gps." + tbname + " WHERE thefielddatadatetime > '" + insertdate + " " + inserttime + "' AND TheFiledTextFileName in ('SI','ON','OF','ST','SP') order by thefielddatadatetime asc limit 1";
									ResultSet rsvehcode = stvehcode.executeQuery(sqlvehcode);
									if(rsvehcode.next()) {
										String recordDate = rsvehcode.getString("TheFieldDataDate");
										String recordTime = rsvehcode.getString("TheFieldDataTime");
										double recordDistance = rsvehcode.getDouble("Distance");
										double recordDistance1 = rsvehcode.getDouble("CDistance");
										double recordLatitude = rsvehcode.getDouble("LatinDec");
										double recordLongitude = rsvehcode.getDouble("LonginDec");
										String recordStamp = rsvehcode.getString("TheFiledTextFileName");
										if("SI".equalsIgnoreCase(stamp) || "ON".equalsIgnoreCase(stamp) || "OF".equalsIgnoreCase(stamp) || "SP".equalsIgnoreCase(stamp) || "ST".equalsIgnoreCase(stamp)) {
											double newDistanceCorrection = distanceCorrectionForUnsendData(vehcode, recordDate, recordTime,
												(int) recordDistance1, recordLatitude, recordLongitude, DistCorrFactor, AvgSpeed, recordStamp, "false", idledistance, DistType);
											double distDiff = newDistanceCorrection - recordDistance;
											if(distDiff != 0) {
												String sqlvehcodeCorr = "UPDATE " + tbname + " SET Distance=" + newDistanceCorrection + " WHERE thefielddatadatetime = '" + recordDate + " " + recordTime + "' AND TheFiledTextFileName IN ('SI','ON','OF','ST','SP')";
												stunsendDataCorrection.executeUpdate(sqlvehcodeCorr);
											}
											if(distDiff != 0) {
												String sqlvehcodeCorr = "UPDATE " + tbname + " SET Distance=Distance+" + distDiff + " WHERE thefielddatadatetime > '" + recordDate + " " + recordTime + "' AND TheFiledTextFileName IN ('SI','ON','OF','ST','SP')";
												stunsendDataCorrection.executeUpdate(sqlvehcodeCorr);
											}
										}
									}
								}
							}
							if(tbname.equals("t_veh0")) {} else {
								String dayendstatus = "No";
								String sqldayend = "select dayendstatus from db_gpsExceptions.t_vehall_ds where VehCode='" + vehcode + "' and Thedate = curdate() - INTERVAL 1 DAY ";
								ResultSet rsdayend = stexceptioncheck.executeQuery(sqldayend);
								if(rsdayend.next()) dayendstatus = rsdayend.getString("dayendstatus");
								java.util.Date sysDate = new java.util.Date();
								String date11 = new SimpleDateFormat("yyyy-MM-dd").format(sysDate);
								java.util.Date dt11 = new SimpleDateFormat("yyyy-MM-dd").parse(date11);
								java.util.Date dt22 = new SimpleDateFormat("yyyy-MM-dd").parse(insertdate);
								Calendar cal = Calendar.getInstance();
								cal.add(Calendar.MONTH, -1);
								String date1month1 = new SimpleDateFormat("yyyy-MM-dd").format(cal.getTime());
								java.util.Date dt1month = new SimpleDateFormat("yyyy-MM-dd").parse(date1month1);
								long stampdate = dt22.getTime();
								long date1month = dt1month.getTime();
								if(dt22.before(dt11) && stampdate >= date1month) {
									long daysdiff = (dt11.getTime() - dt22.getTime()) / (1000 * 60 * 60 * 24);
									String systime = new SimpleDateFormat("HH:mm:ss").format(sysDate);
									java.util.Date systime1 = new SimpleDateFormat("HH:mm:ss").parse(systime);
									String checktime = "04:00:00";
									java.util.Date checktime1 = new SimpleDateFormat("HH:mm:ss").parse(checktime);
									if(daysdiff == 1 && dayendstatus.equalsIgnoreCase("No")) {} else {
										String sqlDayEnd = "SELECT * FROM db_gps.t_repeatDayEnd WHERE vehicleCode='" + vehcode + "' AND DataDate='" + insertdate + "'";
										ResultSet rsDayEnd = stunsendDataCorrection.executeQuery(sqlDayEnd);
										if(rsDayEnd.next()) {
											String sqlUpdate = "UPDATE db_gps.t_repeatDayEnd SET DayEndStatus='Pending' WHERE vehicleCode='" + vehcode + "' AND DataDate='" + insertdate + "'";
											stvehcode.executeUpdate(sqlUpdate);
										} else {
											String sqlUpdate = "INSERT INTO db_gps.t_repeatDayEnd (vehicleCode,vehRegNumber,transporter,DataDate,dayendStatus) values ('" + vehcode + "','" + vehregno + "','" + ownername + "','" + insertdate + "','Pending')";
											stvehcode.executeUpdate(sqlUpdate);
										}
									}
								}
							}
						} else {
							if(token.length() > 1) {
								InsertInvalidData(srno, unitid, token, storeddate, storedtime, "Stamp Problem");
							}
						}
					} catch (Exception e) {
						SaveException(e.toString(), " MailExtracter Greater than 6900 Processing at line 1425 (!!! EXTRACT EXCEPTION !!!) ");
						String sqlexec = "update " + tablename + " set Status='Exception' where RID='" + srno + "'";
						st3.executeUpdate(sqlexec);
					}
				}
			}
			sql = "update " + tablename + " set Status='Processed' where RID='" + srno + "'";
			st3.executeUpdate(sql);
		}
	} catch (Exception e) {
		SaveException(e.toString(), " MailExtracter Greater than 6900 Processing at line 1425 (!!! EXTRACT EXCEPTION !!!) ");
		String sqlexec = "update " + tablename + " set Status='Exception' where RID='" + srno + "'";
		st3.executeUpdate(sqlexec);
	}
}
